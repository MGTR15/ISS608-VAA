---
title: "Hands-on Exercise 2"
author: "Marga Thura"
---

# 2 Beyond ggplot2 Fundamentals

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse) 
```

# 2.1 Getting started

## 2.1.1 Installing and loading the required libraries

In this exercise, beside tidyverse, four R packages will be used. They are:

-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.

-   ggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.

-   hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.

-   patchwork: an R package for preparing composite figure created using ggplot2.

Code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.

# 2.2 Importing data

For the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.

The code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.

```{r}
exam_data <- read_csv("Data_02/Exam_data.csv")
```

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

# 2.3 Beyond ggplot2 Annotation: ggrepel

::: panel-tabset
## Default

```{r, warning=FALSE, message=FALSE}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## With ggrepel

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm, 
              linewidth = 0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## ggrepel overlaps allowed

```{r}
ggplot(data = exam_data, 
       aes(x = MATHS, 
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm, 
              linewidth = 0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold",
                   max.overlaps = nrow(exam_data)*0.2) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

# 2.4 Beyond ggplot2 Themes

ggplot2 comes with eight built-in themes, they are: theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void().

::: panel-tabset
## Theme Gray

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores")
```

## Theme classic

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_classic() +
  ggtitle("Distribution of Maths scores")
```

## Theme dark

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_dark() +
  ggtitle("Distribution of Maths scores")
```

## Theme Void

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_void() +
  ggtitle("Distribution of Maths scores")
```

## Theme economist

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_economist() +
  ggtitle("Distribution of Maths scores")
```
:::

## 2.4.1 Working with hrbthems package

[hrbrthemes](https://cran.r-project.org/web/packages/hrbrthemes/index.html) package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

```{r, warning=FALSE, message=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

The second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more

```{r, warning=FALSE, message=FALSE}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

::: callout-tip
## What can we learn from the code chunk above?

-   `axis_title_size` argument is used to increase the font size of the axis title to 18,
-   `base_size argument` is used to increase the default axis label to 15, and
-   `grid argument` is used to remove the x-axis grid lines.
:::

# 2.5 Beyond Single Graph

It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. We will explore the three different graphs Math Scores, English Score and Maths vs English graph respectively:

::: panel-tabset
## Math scores graph

```{r}
p1 <- ggplot(data = exam_data, 
       aes(x = MATHS)) +
  geom_histogram(bins = 20, 
                 boundary = 100,
                 color = "grey25", 
                 fill = "grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores") 

p1
```

## English scores graph

```{r}
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")

p2
```

## Math vs English

```{r}
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")

p3
```
:::

## 2.5.1 Creating Composite Graphics: pathwork methods

There are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as [grid.arrange()](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html) of **gridExtra** package and [plot_grid()](https://wilkelab.org/cowplot/reference/plot_grid.html) of[cowplot](https://wilkelab.org/cowplot/index.html) package. In this section, I am going to shared with you an ggplot2 extension called [patchwork](https://patchwork.data-imaginist.com/) which is specially designed for combining separate ggplot2 graphs into a single figure.

Patchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:

-   Two-Column Layout using the Plus Sign +.

-   Parenthesis () to create a subplot group.

-   Two-Row Layout using the Division Sign /

## 2.5.2 Combining two ggplot2 graphs

Figure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!

::: panel-tabset
# plot

```{r}
#| echo: false
p1 + p2
```

# The code
```{r}
#| eval: false
p1 + p2
```

:::

## 2.5.3 Combining three ggplot2 graphs

We can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:

-   “/” operator to stack two ggplot2 graphs,

-   “\|” operator to place the plots beside each other,

-   “()” operator the define the sequence of the plotting.

::: panel-tabset
# plot

```{r, message=FALSE}
#| echo: false
(p1 / p2) | p3
```

# the code
```{r, message=FALSE}
#| eval: false
(p1 / p2) | p3
```
:::

To learn more about, refer to [Plot Assembly.](https://patchwork.data-imaginist.com/articles/guides/assembly.html)

## 2.5.4 Creating a composite figure with tag

In order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.

::: panel-tabset
# plot

```{r, message=FALSE}
#| echo: false
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

# the code
```{r, message=FALSE}
#| eval: false
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```
:::

## 2.5.5 Creating figure with insert

Beside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.

::: panel-tabset
# plot

```{r, message=FALSE}
#| echo: false
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

# the code

```{r, message=FALSE}
#| eval: false
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```
:::

# 2.6 Reference

-   [Patchwork R package goes nerd viral](https://www.littlemissdata.com/blog/patchwork)

-   [ggrepel](https://ggrepel.slowkow.com/)

-   [ggthemes](https://ggplot2.tidyverse.org/reference/ggtheme.html)

-   [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/)

-   [ggplot tips: Arranging plots](https://albert-rapp.de/post/2021-10-28-extend-plot-variety/)

-   [ggplot2 Theme Elements Demonstration](https://henrywang.nl/ggplot2-theme-elements-demonstration/)

-   [ggplot2 Theme Elements Reference Sheet](https://isabella-b.com/blog/ggplot2-theme-elements-reference/)
