---
title: "Hands-on Exercise 5"
author: "Marga Thura"
date: "May 14 2025"
date-modified: "May 14 2025"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 27 Chapter 27: Modelling, Visualising and Analysing Network Data with R

## 27.1 Overview

In this hands-on exercise, we will learn how to model, analyse and visualise network data using R.

Learning outcomes:

-   create graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,

-   build network graph visualisation using appropriate functions of ggraph,

-   compute network geometrics using tidygraph,

-   build advanced graph visualisation by incorporating the network geometrics, and build interactive network visualisation using visNetwork package.

# 27.2 Getting Started

## 27.2.1 Installing and launching R packages

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts, 
               concaveman, ggforce)
```

# 27.3 The Data

The data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.

The edges data: GAStech-email_edges.csv which consists of two weeks of 9063 emails correspondances between 55 employees.

The nodes data: GAStech_email_nodes.csv which consist of the names, department and title of the 55 employees.

## 27.3.1 Importing network data from files

```{r}
GAStech_nodes <- read_csv("Data_05/GAStech_email_node.csv")
GAStech_edges <- read_csv("Data_05/GAStech_email_edge-v2.csv")
```

## 27.3.2 Reviewing the imported data

```{r}
glimpse(GAStech_edges)
```

::: callout-warning
The output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type.
:::

## 27.3.3 Wrangling time

```{r}
#| code-fold: true
#| code-summary: "Show the code"
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

::: callout-tip
## Things to learn from the code above

-   both *dmy()* and *wday()* are functions of **lubridate** package. [lubridate](https://r4va.netlify.app/cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html) is an R package that makes it easier to work with dates and times.

-   *dmy()* transforms the SentDate to Date data type.

-   *wday()* returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of *wday()* will save in this newly created field.

-   the values in the *Weekday* field are in ordinal scale.
:::

## 27.3.4 Reviewing the revised date fields

```{r}
glimpse(GAStech_edges)
```

## 27.3.5 Wrangling attributes

A close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.

In view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

::: callout-tip
## Things to learn from the code above

-   four functions from **dplyr** package are used. They are: *filter()*, *group()*, *summarise()*, and *ungroup()*.

-   The output data.frame is called **GAStech_edges_aggregated**.

-   A new field called *Weight* has been added in GAStech_edges_aggregated.
:::

## 27.3.6 Reviewing the revised edges file

```{r}
#| code-fold: true
#| code-summary: "Show the code"

glimpse(GAStech_edges_aggregated)

```

# 27.4 Creating network objects using tidygraph

## 27.4.1 The tbl_graph object

Two functions of **tidygraph** package can be used to create network objects, they are:

-   [`tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) creates a **tbl_graph** network object from nodes and edges data.

-   [`as_tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) converts network data and objects to a **tbl_graph** network. Below are network data and objects supported by `as_tbl_graph()`

    -   a node data.frame and an edge data.frame,

    -   data.frame, list, matrix from base,

    -   igraph from igraph,

    -   network from network,

    -   dendrogram and hclust from stats,

    -   Node from data.tree,

    -   phylo and evonet from ape, and

    -   graphNEL, graphAM, graphBAM from graph (in Bioconductor).

    **The dplyr verbs in tidygraph**

    -   *activate()* verb from **tidygraph** serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to **tbl_graph** object are applied to the active tibble.

## 27.4.2 Using tbl_graph() to build tidygraph data model.

We will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
```

## 27.4.3 Reviewing the output tidygraph’s graph object

```{r}
GAStech_graph
```

The output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges. The command also prints the first six rows of “Node Data” and the first three of “Edge Data”. It states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.

## 27.4.4 Changing the active object

We want to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange() to change the nodes tibble data frame which is activated by default.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

# 27.5 Plotting Static Network Graphs with ggraph package

## 27.5.1 Plotting a basic network graph

The code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()
```

::: callout-tip
## Things to learn from this code above:

-   The basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object.
:::

## 27.5.2 Changing the default network graph theme

We will use theme_graph() to remove the x and y axes.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

::: callout-tip
## Things to learn from this code above:

-   **ggraph** introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. `theme_graph()`, besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).

-   The ggraph theme can be set for a series of plots with the `set_graph_style()` command run before the graphs are plotted or by using `theme_graph()` in the individual plots.
:::

## 27.5.3 Coloring of the plot

```{r}
#| code-fold: true
#| code-summary: "Show the code"
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')
```

## 27.5.4 Fruchterman and Reingold layout

The code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

g <- ggraph(GAStech_graph, 
            layout = "fr") +
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

::: callout-tip
## Thing to learn from the code above:

layout argument is used to define the layout to be used.
:::

## 27.5.5 Modifying network nodes

```{r}
#| code-fold: true
#| code-summary: "Show the code"
g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

::: callout-tip
## Thing to learn from the code above:

-   geom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.
:::

## 27.5.6 Modifying edges

```{r}
#| code-fold: true
#| code-summary: "Show the code"

g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()

```

::: callout-tip
## Thing to learn from the code above:

-   geom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line.
:::

# 27.6 Creating facet graphs

::: panel-tabset
## facet_edges()

```{r}
#| echo: false
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

## Code

```{r}
#| eval: false
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

## theme()

```{r}
#| echo: false
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~Weekday)
```

## Code

```{r}
#| eval: false
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~Weekday)
```

## A framed facet graph

```{r}
#| echo: false
set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

## Code

```{r}
#| eval: false
set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

## facet_nodes()

```{r}
#| echo: false
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

## Code

```{r}
#| eval: false
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```
:::

# 27.7 Network Metrics Analysis

## 27.7.1 Computing centrality indices

Centrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```

::: callout-tip
## Things to learn from the code above:

-   mutate() of dplyr is used to perform the computation.
-   the algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.
:::

## 27.7.2 Visualisation Network Metrics

::: panel-tabset
## ggraph

```{r}
#| eval: false
g <- GAStech_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department, 
                      size = centrality_betweenness()))
g + theme_graph()
```

## Plot

```{r}
#| echo: false
g <- GAStech_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department, 
                      size = centrality_betweenness()))
g + theme_graph()
```

## group_edge_betweenness()

```{r}
#| eval: false
g <- GAStech_graph %>%
  mutate(community = as.factor(
    group_edge_betweenness(
      weights = Weight, 
      directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(
    aes(
      width=Weight), 
    alpha=0.2) +
  scale_edge_width(
    range = c(0.1, 5)) +
  geom_node_point(
    aes(colour = community))  

g + theme_graph()
```

## Plot

```{r}
#| echo: false
g <- GAStech_graph %>%
  mutate(community = as.factor(
    group_edge_betweenness(
      weights = Weight, 
      directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(
    aes(
      width=Weight), 
    alpha=0.2) +
  scale_edge_width(
    range = c(0.1, 5)) +
  geom_node_point(
    aes(colour = community))  

g + theme_graph()
```

## ggforce

```{r}
#| eval: false
g <- GAStech_graph %>%
  activate(nodes) %>%
  mutate(community = as.factor(
    group_optimal(weights = Weight)),
         betweenness_measure = centrality_betweenness()) %>%
  ggraph(layout = "fr") +
  geom_mark_hull(
    aes(x, y, 
        group = community, 
        fill = community),  
    alpha = 0.2,  
    expand = unit(0.3, "cm"),  # Expand
    radius = unit(0.3, "cm")  # Smoothness
  ) + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(fill = Department,
                      size = betweenness_measure),
                      color = "black",
                      shape = 21)
  
g + theme_graph()
```

## Plot

```{r}
#| echo: false
g <- GAStech_graph %>%
  activate(nodes) %>%
  mutate(community = as.factor(
    group_optimal(weights = Weight)),
         betweenness_measure = centrality_betweenness()) %>%
  ggraph(layout = "fr") +
  geom_mark_hull(
    aes(x, y, 
        group = community, 
        fill = community),  
    alpha = 0.2,  
    expand = unit(0.3, "cm"),  # Expand
    radius = unit(0.3, "cm")  # Smoothness
  ) + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(fill = Department,
                      size = betweenness_measure),
                      color = "black",
                      shape = 21)
  
g + theme_graph()
```
:::

# 27.8 Building Interactive Network Graph with visNetwork

-   [visNetwork()](http://datastorm-open.github.io/visNetwork/) is a R package for network visualization, using [vis.js](http://visjs.org/) javascript library.

-   *visNetwork()* function uses a nodes list and edges list to create an interactive graph.

    -   The nodes list must include an “id” column, and the edge list must have “from” and “to” columns.

    -   The function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.

## 27.8.1 Data preparation

```{r}
#| code-fold: true
#| code-summary: "Show the code"
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

## 27.8.2 Plotting the first interactive network graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") 
```

## 27.8.3 Working with layout

```{r}
#| code-fold: true
#| code-summary: "Show the code"
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") 

```

## 27.8.4 Working with visual attributes - Nodes

visNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 
```

When we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

## 27.8.5 Working with visual attributes - Edges

```{r}
#| code-fold: true
#| code-summary: "Show the code"
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

# 27.8.6 Interactivity

In the code chunk below, visOptions() is used to incorporate interactivity features in the data visualisation.

The argument highlightNearest highlights nearest when clicking a node. The argument nodesIdSelection adds an id node selection creating an HTML select element.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```
