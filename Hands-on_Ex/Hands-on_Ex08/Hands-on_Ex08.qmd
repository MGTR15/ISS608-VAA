---
title: "Hands On Exercise 8"
author: "Marga Thura"
date: "June 09 2025"
date-modified: "June 10 2025"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 21 Choropleth Mapping with R

# 21.1 Overview

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

In this chapter, we will plot functional and truthful choropleth maps by using an R package called [**tmap**](https://r-tmap.github.io/tmap/) package.

# 21.2 Getting Started

In this hands-on exercise, the key R package use is [**tmap**](https://cran.r-project.org/web/packages/tmap/) package in R. Beside **tmap** package, four other R packages will be used. They are:

-   [**readr**](https://readr.tidyverse.org/) for importing delimited text file,

-   [**tidyr**](https://tidyr.tidyverse.org/) for tidying data,

-   [**dplyr**](https://dplyr.tidyverse.org/) for wrangling data and

-   [**sf**](https://cran.r-project.org/web/packages/sf/index.html) for handling geospatial data.

Among the four packages, **readr**, **tidyr** and **dplyr** are part of **tidyverse** package.

The code chunk below will be used to install and load these packages in RStudio.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

# 21.3 Importing Data into R

## 21.3.1 The Data

Two data set will be used to create the choropleth map. They are:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile

## 21.3.2 Importing Geospatial Data into R

```{r}
#| code-fold: true
#| code-summary: "Show the code"

mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")
```

Examine the content

```{r}
#| code-fold: true
#| code-summary: "Show the code"

mpsz
```

The object mpsz is a simple feature (sf) data frame, and R prints only the first few rows by default for readability, just like it does for regular data frames.

## **We can view all rows and columns with:**

```{r}
#| code-fold: true
#| code-summary: "Show the code"

as.data.frame(mpsz)
```

## 21.3.3 Importing Attribute Data into R

Next, we will import *respopagsex2011to2020.csv* file into RStudio and save the file into an R dataframe called *popagsex*.

The task will be performed by using *read_csv()* function of **readr** package as shown in the code chunk below.

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

## 21.3.4 Data Wrangling

The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.

YOUNG: age group 0 to 4 until age group 20 to 24, ECONOMY ACTIVE: age group 25-29 until age group 60-64, AGED: age group 65 and above, TOTAL: all age group, and DEPENDENCY: the ratio between young and aged against economy active group.

The following data wrangling and transformation functions will be used:

-   *pivot_wider()* of **tidyr** package, and

-   *mutate()*, *filter()*, *group_by()* and *select()* of **dplyr** package

```{r}
#| code-fold: true
#| code-summary: "Show the code"

popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

## 21.3.5 Joining the attribute data and geospatial data

Before we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 <- popdata2020 %>%
  mutate(across(c(PA, SZ), toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Next, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

::: callout-tip
## Thing to learn from the code chunk above:

left_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.
:::

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

# 21.4 Choropleth Mapping Geospatial Data Using tmap

Two approaches can be used to prepare thematic map using *tmap*, they are:

-   Plotting a thematic map quickly by using *qtm()*.

-   Plotting highly customisable thematic map by using tmap elements.

## 21.4.1 Plotting a choropleth map quickly by using *qtm()*

The easiest and quickest to draw a choropleth map using **tmap** is using *qtm()*. It is concise and provides a good default visualisation in many cases.

The code chunk below will draw a cartographic standard choropleth map as shown below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

::: callout-tip
## Things to learn from the code chunk above:

-   *tmap_mode()* with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.

-   *fill* argument is used to map the attribute (i.e. DEPENDENCY)
:::

## 21.4.2 Creating a choropleth map by using tmap’s elements

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons(fill = "DEPENDENCY", 
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                title = "Dependency ratio")) +
  tm_title("Distribution of Dependency Ratio by planning subzone") +
  tm_layout(frame = TRUE) +
  tm_borders(fill_alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## 21.4.3 Drawing a base map

The basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().

In the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020) +
  tm_polygons()
```

## 21.4.4 Drawing a choropleth map using tm_polygons()

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

::: callout-tip
## Things to learn from the code chunk above:

-   The default interval binning used to draw the choropleth map is called “pretty”.

-   The default colour scheme used is `YlOrRd` of ColorBrewer.

-   By default, Missing value will be shaded in grey.
:::

## 21.4.5 Drawing a choropleth map using tm_fill() and \*tm_border()\*\*

The code chunk below draws a choropleth map by using tm_fill() alone.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

To add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons(fill = "DEPENDENCY") +
  tm_borders(lwd = 0.01,  
             fill_alpha = 0.1)
```

## 21.4.6 Data classification methods of tmap

Most choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.

**tmap** provides a total ten data classification methods, namely: *fixed*, *sd*, *equal*, *pretty* (default), *quantile*, *kmeans*, *hclust*, *bclust*, *fisher*, and *jenks*.

To define a data classification method, the *style* argument of *tm_fill()* or *tm_polygons()* will be used.

## 21.4.7 Plotting choropleth maps with built-in classification methods

The code chunk below shows a quantile data classification that used 5 classes.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "quantile",
        n = 5)) +
  tm_borders(fill_alpha = 0.5)
```

In the code chunk below, equal data classification method is used.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "equal",
        n = 5)) +
  tm_borders(fill_alpha = 0.5)
```

Notice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.

## 21.4.8 Using different classification methods

::: panel-tabset
## pretty

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "pretty",
        n = 5)) +
  tm_borders(fill_alpha = 0.5)
```

## kmeans

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "kmeans",
        n = 5)) +
  tm_borders(fill_alpha = 0.5)
```

## sd

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "sd",
        n = 5)) +
  tm_borders(fill_alpha = 0.5)
```

## fisher

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "fisher",
        n = 5)) +
  tm_borders(fill_alpha = 0.5)
```
:::

## 21.4.9 Using similar classification method but with different numbers of classes

::: panel-tabset
## fisher (2 classes)

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "fisher",
        n = 2)) +
  tm_borders(fill_alpha = 0.5)
```

## fisher (6 classes)

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "fisher",
        n = 6)) +
  tm_borders(fill_alpha = 0.5)
```

## fisher (10 classes)

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "fisher",
        n = 10)) +
  tm_borders(fill_alpha = 0.5)
```

## fisher (20 classes)

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "fisher",
        n = 20)) +
  tm_borders(fill_alpha = 0.5)
```
:::

## 21.5.0 Insight

Choice of classification method matters: Different methods can produce dramatically different maps even with the same number of classes.

*Fisher* and *kmeans* are often preferable for real-world spatial analysis due to their data-driven nature.

Number of classes should match analysis goal:

-   Use fewer classes (e.g., 2–6) for general trends.

-   Use more classes (e.g., 10+) for detailed exploration, but only if the audience can handle complexity.

-   Avoid overfitting visuals: Maps with too many classes (like 20) may confuse rather than clarify.

## 21.5.1 Plotting choropleth map with custome break

Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

plot the choropleth map

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(fill_alpha = 0.5)
```

## 21.5.2 Colour Scheme

tmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.

To change the colour, we assign the preferred colour to values argument of tm_scale_intervals() as shown in the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "quantile",
        n = 5,
        values = "brewer.greens")) +
  tm_borders(fill_alpha = 0.5)
```

Notice that the choropleth map is shaded in green.

To reverse the colour shading, add a “-” prefix.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "quantile",
        n = 5,
        values = "-brewer.greens")) +
  tm_borders(fill_alpha = 0.5)
```

## 21.5.3 Map Layouts

Map layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.

In **tmap**, several `tm_legend()` options are provided to change the placement, format and appearance of the legend.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY",
      fill.scale = tm_scale_intervals(
        style = "jenks",
        n = 5,
        values = "brewer.greens"),
      fill.legend = tm_legend(
        title = "Dependency ratio")) +
  tm_borders(fill_alpha = 0.5) +
  tm_title("Distribution of Dependency Ratio by planning subzone \n(Jenks classification)")
```

## 21.5.4 Map style

**tmap** allows a wide variety of layout settings to be changed. They can be called by using *tmap_style()*.

The code chunk below shows the *classic* style is used.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

In the code chunk below, `tm_compass()`, `tm_scale_bar()` and `tm_grid()` are used to add compass, scale bar and grid lines onto the choropleth map.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+
  tm_polygons(fill = "DEPENDENCY", 
              fill.scale = tm_scale_intervals(
                style = "quantile",
                n = 5,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                title = "Dependency ratio")) +
  tm_title("Distribution of Dependency Ratio by planning subzone") +
  tm_layout(frame = TRUE) +
  tm_borders(fill_alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

To reset the default style, refer to the code chunk below.

```{r}
tmap_style("white")
```

## 21.5.5 Drawing Small Multiple Choropleth Maps

**Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.

In **tmap**, small multiple maps can be plotted in three ways:

-   by assigning multiple values to at least one of the asthetic arguments,

-   by defining a group-by variable in *tm_facets()*, and

-   by creating multiple stand-alone maps with *tmap_arrange()*.

Small multiple choropleth maps are created by defining ncols in tm_fill().

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

In this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

In this example, multiple small choropleth maps are created by using `tm_facets()`.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

In this example, multiple small choropleth maps are created by creating multiple stand-alone maps with `tmap_arrange()`.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

## 21.5.6 Mappping Spatial Object Meeting a Selection Criterion

Instead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

## **21.6 Reference**

### **21.6.1 All about tmap package**

-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)

-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)

-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)

-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)

-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)

-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)

### **21.6.2 Geospatial data wrangling**

-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/index.html)

-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)

-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)

### **21.6.3 Data wrangling**

-   [dplyr](https://dplyr.tidyverse.org/)

-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)

-   [tidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)

# 22 Visualising Geospatial Point Data

# Overview

Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, we will create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called **tmap**.

# 23 Getting Started

Make sure tmap package of R and other related R packages have been installed and loaded into R.

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## 23.1 Data Import and Preparation

The data set use for this hands-on exercise is called SGPools_svy21. The data is in csv file format.

The code chunk below uses *read_csv()* function of **readr** package to import *SGPools_svy21.csv* into R as a tibble data frame called *sgpools*.

```{r}
sgpools <- read_csv("data/aspatial/SGPools_svy21.csv")
```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

The code chunk below shows list() is used to do the job.

```{r}
list(sgpools) 
```

Notice that the sgpools data in tibble data frame and not the common R data frame.

## 23.2 Creating a sf data frame from an aspatial data frame

The code chunk below converts sgpools data frame into a simple feature data frame by using *st_as_sf()* of **sf** packages

```{r}
sgpools_sf <- st_as_sf(sgpools, 
                       coords = c("XCOORD", "YCOORD"),
                       crs= 3414)
```

Things to learn from the arguments above:

-   The *coords* argument requires to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   The *crs* argument required to provide the coordinates system in epsg format. [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System.

We can display the basic information of the newly created sgpools_sf by using the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

list(sgpools_sf)

```

# 24 Drawing Proportional Symbol Map

To create an interactive proportional symbol map in R, the view mode of tmap will be used.

The code churn below will turn on the interactive mode of tmap.

```{r}
tmap_mode("view")
```

## 24.1 An interactive point symbol map

The code chunks below are used to create an interactive point symbol map.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "red",
           size = 1,
           col = "black",
           lwd = 1)
```

## 24.2 Lets make it proportional

To draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "red",
             size = "Gp1Gp2 Winnings",
             col = "black",
             lwd = 1)
```

## 24.3 Lets give it a different colour

The proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "OUTLET TYPE", 
             size = "Gp1Gp2 Winnings",
             col = "black",
             lwd = 1)
```

## 24.4 I have twin brothers

An impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(sgpools_sf) + 
  tm_bubbles(fill = "OUTLET TYPE", 
             size = "Gp1Gp2 Winnings",
             col = "black",
             lwd = 1) + 
  tm_facets(by= "OUTLET TYPE",
            nrow = 1,
            sync = TRUE)
```

```{r}
tmap_mode("plot")
```

## 24.5 References

### 24.5.1 All about tmap package

-   [tmap: Thematic Maps in R](https://www.jstatsoft.org/article/view/v084i06)

-   [tmap](https://cran.r-project.org/web/packages/tmap/index.html)

-   [tmap: get started!](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html)

-   [tmap: changes in version 2.0](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-changes-v2.html)

-   [tmap: creating thematic maps in a flexible way (useR!2015)](http://von-tijn.nl/tijn/research/presentations/tmap_user2015.pdf)

-   [Exploring and presenting maps with tmap (useR!2017)](http://von-tijn.nl/tijn/research/presentations/tmap_user2017.pdf)

### 24.5.2 Geospatial data wrangling

-   [sf: Simple Features for R](https://cran.r-project.org/web/packages/sf/index.html)

-   [Simple Features for R: StandardizedSupport for Spatial Vector Data](https://journal.r-project.org/archive/2018/RJ-2018-009/RJ-2018-009.pdf)

-   [Reading, Writing and Converting Simple Features](https://cran.r-project.org/web/packages/sf/vignettes/sf2.html)

### 24.5.3 Data wrangling

-   [dplyr](https://dplyr.tidyverse.org/)

-   [Tidy data](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)

-   [tidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions](https://cran.r-project.org/web/packages/tidyr/tidyr.pdf)

# 23 Analytical Mapping

# 23.1 Overview

## 23.2 Objectives

In this in-class exercise, we will gain hands-on experience on using appropriate R methods to plot analytical maps.

By the end of this in-class exercise, we will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:

-   Importing geospatial data in rds format into R environment.

-   Creating cartographic quality choropleth maps by using appropriate tmap functions.

-   Creating rate map

-   Creating percentile map

-   Creating boxmap

# 24 Getting Started

## 24.1 Installing and loading packages

```{r}
pacman::p_load(tmap, tidyverse, sf)
```

## 24.2 Importing data

For the purpose of this hands-on exercise, a prepared data set called NGA_wp.rds will be used. The data set is a polygon feature data.frame providing information on water point of Nigeria at the LGA level.

```{r}
NGA_wp <- read_rds("data/rds/NGA_wp.rds")
```

# 25 Basic Choropleth Mapping

## 25.1 Visualising distribution of non-functional water point

```{r}
#| code-fold: true
#| code-summary: "Show the code"

p1 <- tm_shape(NGA_wp) +
  tm_polygons(fill = "wp_functional",
             fill.scale = tm_scale_intervals(
               style = "equal",
               n = 10,
               values = "brewer.blues"),
             fill.legend = tm_legend(
               position = c("right", "bottom"))) +
  tm_borders(lwd = 0.1,
             fill_alpha = 1) +
  tm_title("Distribution of functional water point by LGAs")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

p2 <- tm_shape(NGA_wp) + 
  tm_polygons(fill = "total_wp", 
              fill.scale = tm_scale_intervals(
                style = "equal",
                n = 10,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                position = c("right", "bottom"))) +
  tm_borders(lwd = 0.1, 
             fill_alpha = 1) + 
  tm_title("Distribution of total  water point by LGAs")
```

```{r}
tmap_arrange(p2, p1, nrow = 1)
```

## 25.2 Choropleth Map for Rates

In much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.

## 25.3 Deriving Proportion of Functional Water Points and Non-Functional Water Points

We will tabulate the proportion of functional water points and the proportion of non-functional water points in each LGA. In the following code chunk, `mutate(`) from **dplyr** package is used to derive two fields, namely *pct_functional* and *pct_nonfunctional*.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

NGA_wp <- NGA_wp %>%
  mutate(pct_functional = wp_functional/total_wp) %>%
  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)
```

## 25.4 Plotting map of rate

Plot a choropleth map showing the distribution of percentage functional water point by LGA.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tm_shape(NGA_wp) +
  tm_polygons("pct_functional",
              fill.scale = tm_scale_intervals(
                style = "equal",
                n = 10,
                values = "brewer.blues"),
              fill.legend = tm_legend(
                position = c("right", "bottom"))) + 
  tm_borders(lwd = 0.1,
             fill_alpha = 1) +
  tm_title("Rate map of functional water point by LGAs")
```

# 26 Extreme Value Maps

Extreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).

## 26.1 Percentile Map

The percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.

Data Preparation Step 1: Exclude records with NA by using the code chunk below.

```{r}
NGA_wp <- NGA_wp %>%
  drop_na()
```

Step 2: Creating customised classification and extracting values

```{r}
percent <- c(0,.01,.1,.5,.9,.99,1)
var <- NGA_wp["pct_functional"] %>%
  st_set_geometry(NULL)
quantile(var[,1], percent)
```

## 26.2 Creating the get.var function

Firstly, we will write an R function as shown below to extract a variable (i.e. *wp_nonfunctional*) as a vector out of an sf data.frame.

-   arguments:

    -   vname: variable name (as character, in quotes)

    -   df: name of sf data frame

-   returns:

    -   v: vector with values (without a column name)

```{r}
#| code-fold: true
#| code-summary: "Show the code"

get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

## 26.3 A percentile mapping function

Next, we will write a percentile mapping function by using the code chunk below.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(df) +
  tm_polygons() +
  tm_shape(df) +
     tm_polygons(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}
```

## 26.4 Test drive the percentile mapping function

```{r}
percentmap("total_wp", NGA_wp)
```

## 26.5 Box map

In essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).

```{r}
ggplot(data = NGA_wp,
       aes(x = "",
           y = wp_nonfunctional)) +
  geom_boxplot()
```

-   Displaying summary statistics on a choropleth map by using the basic principles of boxplot.

-   To create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.

## 26.6 Creating the boxbreaks function

The code chunk below is an R function that creating break points for a box map.

-   arguments:

    -   v: vector with observations

    -   mult: multiplier for IQR (default 1.5)

-   returns:

    -   bb: vector with 7 break points compute quartile and fences

```{r}
#| code-fold: true
#| code-summary: "Show the code"

boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}
```

## 26.7 Creating the get.var function

The code chunk below is an R function to extract a variable as a vector out of an sf data frame.

-   arguments:

    -   vname: variable name (as character, in quotes)

    -   df: name of sf data frame

-   returns:

    -   v: vector with values (without a column name)

```{r}
#| code-fold: true
#| code-summary: "Show the code"

get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

## 26.8 Test drive the newly created function

```{r}
var <- get.var("wp_nonfunctional", NGA_wp) 
boxbreaks(var)
```

## 26.9 Boxmap function

The code chunk below is an R function to create a box map. - arguments: - vnam: variable name (as character, in quotes) - df: simple features polygon layer - legtitle: legend title - mtitle: map title - mult: multiplier for IQR - returns: - a tmap-element (plots a map)

```{r}
#| code-fold: true
#| code-summary: "Show the code"

boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Blues",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("left",
                               "top"))
}

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

tmap_mode("plot")
boxmap("wp_nonfunctional", NGA_wp)
```

## 26.9 References

[Chapter 19: Functions](https://r4ds.had.co.nz/functions.html#functions) of **R for Data Science**.
