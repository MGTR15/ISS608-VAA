---
title: "Take-Home Exercise 2"
author: "Marga Thura"
date: "May 13 2025"
date-modified: "May 31 2025"
editor: visual
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
  fold: true
---

# Load the necessary libraries

```{r}
pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph, packcircles, stringr, igraph, visNetwork, treemap)
```

# Read the data

```{r}
# Read JSON file
mc1_data <- fromJSON("MC1_release/MC1_graph.json")
```

# Overview the data

```{r}
glimpse(mc1_data)
```

# Inspect structure

```{r}
str(mc1_data, max.level=1)
```

# Extract and Inspect

```{r}
nodes_tbl <- as_tibble(mc1_data$nodes)

edges_tbl <- as_tibble(mc1_data$links)
```

```{r}
ggplot(data = edges_tbl, 
       aes(y = `Edge Type`)) +
      geom_bar()
```

```{r}
ggplot(data = nodes_tbl,
       aes(y = `Node Type`)) +
  geom_bar()
```

# Creating knowledge graph

Mapping from node id to row index. Ensure each id from your node list is mapped to the correct row number.

```{r}
id_map <- tibble(id = nodes_tbl$id,
                 index = seq_len(
                   nrow(nodes_tbl)))
```

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

# Remove the NA

```{r}
edges_tbl <- edges_tbl %>%
 filter(!is.na(from), !is.na(to))
```

# Creating the graph

```{r}
graph <- tbl_graph(nodes = nodes_tbl,
                   edges = edges_tbl,
                   directed = mc1_data$directed)
```

# Visualising the knowledge graph

```{r}
set.seed(1234)
```

# Visualising the whole graph

```{r}
#| eval: false
ggraph(graph, layout = "fr") +
  geom_edge_link(alpha = 0.3,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 4) +
  geom_node_text(aes(label = name),
                 repel = TRUE,
                 size = 2.5) +
  theme_void()
```

# Filter edges to only MemberOf

```{r}
graph_memberof <- graph %>%
  activate(edges) %>% 
  filter(`Edge Type` == "MemberOf")
```

# Extract only connected nodes (used in the edges)

```{r}
used_nodes_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from, to) %>%
  unlist() %>%
  unique()
```

# Keep only those nodes

```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_nodes_indices) %>%
  select(-row_id)
```

# Plot the sub-graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggraph(graph_memberof,
       layout = "fr") +
  geom_edge_link(alpha = 0.5,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 1) +
  geom_node_text(aes(label = name),
                 repel = TRUE,
                 size = 2.5) +
  theme_void()
```

# Task 1

# Part A: Who has Sailor Shift been most influenced by over time?

To understand how Sailor Shift’s musical style has evolved, we examined the influence relationships affecting her songs over time. We defined influence using five edge types from the dataset: `InStyleOf`, `CoverOf`, `DirectlySamples`, `InterpolatesFrom`, and `LyricalReferenceTo`.

We began by identifying all songs performed by Sailor Shift and organizing them chronologically using their release dates. This temporal ordering allowed us to assess changes in external influences throughout her career.

Next, we filtered the full graph to isolate influential edges targeting Sailor’s songs. These were joined with metadata to identify the artists, groups, or labels responsible for the original source of influence. To ensure accuracy, we also validated that the influencing node was a valid performer using song-to-performer relationships.

## A1. Convert & Validate Dates

```{r}
# Check raw release_date format
nodes_tbl %>%
  select(name, release_date) %>%
  filter(!is.na(release_date)) %>%
  distinct(release_date) %>%
  arrange(release_date)

```

## A2. Check Sailor Shift’s song release date sorted chronologically

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# 1. Find Sailor Shift's ID
sailor_id <- nodes_tbl %>%
  filter(name == "Sailor Shift") %>%
  pull(id)

# 2. Get all songs she performed
sailor_songs <- edges_tbl %>%
  filter(`Edge Type` == "PerformerOf", source == sailor_id) %>%
  pull(target)

# 3. Retrieve and sort their release dates
sailor_songs_tbl <- nodes_tbl %>%
  filter(id %in% sailor_songs) %>%
  select(id, name, release_date) %>%
  mutate(release_year = as.numeric(release_date)) %>%
  arrange(release_year)

# 4. Print result
print(sailor_songs_tbl)

```

## A3. Influence Types

```{r}
influence_types <- c(
  "InStyleOf",
  "CoverOf",
  "DirectlySamples",
  "InterpolatesFrom",
  "LyricalReferenceTo"
)
```

### Build influence data table

```{r}
influences <- edges_tbl %>%
  filter(`Edge Type` %in% influence_types)
```

### Plot influence

```{r}
#| code-fold: true
#| code-summary: "Show the code"
influences %>%
  count(`Edge Type`) %>%
  ggplot(aes(x = reorder(`Edge Type`, n), y = n, fill = `Edge Type`)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  labs(title = "How Sailor Shift Was Influenced",
       x = "Type of Influence", y = "Count") +
  theme_minimal()
```

## A4. Find the song released dates

```{r}
library(dplyr)

# 1. Define the years in which she released music
years <- sort(unique(sailor_songs_tbl$release_year))

years
```

### Define influence_types

```{r}
#| code-fold: true
#| code-summary: "Show the code"

library(dplyr)

yearly_top_influencers <- 
  edges_tbl %>%
  # 1. keep only influence edges
  filter(`Edge Type` %in% influence_types) %>%
  # 2. attach Sailor Shift song years (join on source → id)
  inner_join(
    sailor_songs_tbl,
    by = c("source" = "id")
  ) %>%
  # 3. bring in influencer name + node type
  left_join(
    nodes_tbl %>% select(id, influencer = name, type = `Node Type`),
    by = c("target" = "id")
  ) %>%
  # 4. tally per year + influencer
  count(release_year, influencer, type, name = "count") %>%
  # 5. pick the single top influencer each year
  group_by(release_year) %>%
  slice_max(count, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  arrange(release_year)

print(yearly_top_influencers)
```

### Build perf_map

```{r}
perf_map <- edges_tbl %>% 
  filter(`Edge Type` == "PerformerOf") %>% 
  select(influencer_song = target, 
         performer_id     = source)
```

### Build yearly_top_influencers_artists

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| 
yearly_top_influencers_artists <-
  edges_tbl %>%
  filter(`Edge Type` %in% influence_types) %>%
  
  # attach Sailor Shift’s song years
  inner_join(sailor_songs_tbl, by = c("source" = "id")) %>%
  
  # attach the song→performer mapping
  inner_join(perf_map, by = c("target" = "influencer_song")) %>%
  
  # get the performer’s name & node type
  left_join(
    nodes_tbl %>% select(id, influencer = name, type = `Node Type`),
    by = c("performer_id" = "id")
  ) %>%
  
  # only keep real performers (Person / Music Group / Record Label)
  filter(type %in% c("Person", "Music Group", "Record Label")) %>%
  
  # count per year + performer
  count(release_year, influencer, type, name = "count") %>%
  
  # pick the top performer each year
  group_by(release_year) %>%
  slice_max(count, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  arrange(release_year)

print(yearly_top_influencers_artists)
```

To compare influence levels across different types (e.g., lyrical vs. stylistic), we computed normalized weights: rarer influence types were assigned higher scores to balance their impact in the analysis. For each year in which Sailor released music, we calculated a weighted influence score for every performer that influenced her that year.

## A5. Build weighted counts

```{r}
# 1. Count how many times each Edge Type occurs
base_counts <- influences %>%
  count(`Edge Type`, name = "n")

# 2. Examine
print(base_counts)

```

### Auto_weights

```{r}
# 3. Compute max frequency
max_n <- max(base_counts$n)

# 4. Build the named weight vector
auto_weights <- base_counts %>%
  mutate(weight = max_n / n) %>%
  select(`Edge Type`, weight) %>%
  deframe()

print(auto_weights)
```

### Build weights → weighted_top_by_year_auto

```{r}
#| code-fold: true
#| code-summary: "Show the code"

weighted_top_by_year_auto <- edges_tbl %>%
  filter(`Edge Type` %in% influence_types) %>%
  inner_join(sailor_songs_tbl, by = c("source" = "id")) %>%
  inner_join(perf_map,         by = c("target" = "influencer_song")) %>%
  left_join(
    nodes_tbl %>% select(id, performer = name, type = `Node Type`),
    by = c("performer_id" = "id")
  ) %>%
  filter(type %in% c("Person", "Music Group", "Record Label")) %>%
  mutate(weight = recode(`Edge Type`, !!!auto_weights)) %>%
  group_by(release_year, performer, type) %>%
  summarize(score = sum(weight), .groups = "drop") %>%
  group_by(release_year) %>%
  slice_max(score, n = 1, with_ties = FALSE) %>%
  ungroup() %>%
  arrange(release_year)

print(weighted_top_by_year_auto)
```

## A6. Most Influential Performer by Sailor Shift Release Year

The resulting chart below shows the top influencer by year, accounting for both the frequency and type of influence. Each bar represents a release year in Sailor’s career, annotated with the name of her top influencer (person, group, or label) and the cumulative influence score.

This approach reveals both consistent sources of inspiration and shifts in influence throughout her discography, offering insight into how her sound may have been shaped by key collaborators or predecessors.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

library(ggplot2)

ggplot(weighted_top_by_year_auto,
       aes(x = factor(release_year), y = score, fill = type)) +
  geom_col(show.legend = FALSE) +
  geom_text(aes(label = paste0(performer, "\n(", type, ")")),
            vjust = -0.3, size = 3) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +
  labs(
    title = "Most Influential Performer by Sailor Shift Release Year",
    x = "Release Year",
    y = "Weighted Influence Score"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 0, vjust = 0.5),
    panel.grid.major.x = element_blank()
  )
```

# Part B: Who has Sailor Shift collaborated with and directly or indirectly influenced?

To answer this question, we first identified all artists who collaborated with Sailor Shift, and then checked whether any of these collaborators were later influenced by her music either directly (1 hop) or indirectly (2 hops).

Next, we extracted all `PerformerOf` relationships involving `Person-type` nodes, then grouped artists by song. For each song performed by Sailor Shift, we generated artist pairs to determine collaborators. This yielded a list of artists who co-performed songs with her.

## B1. Create a clean collaboration data table for all artists who collaborated

```{r}
#| code-fold: true
#| code-summary: "Show the code"

library(dplyr)
library(tidyr)

# Step 1: Get all PerformerOf edges with Person nodes only
performer_edges <- edges_tbl %>%
  filter(`Edge Type` == "PerformerOf") %>%
  inner_join(nodes_tbl %>% filter(`Node Type` == "Person") %>% select(id), 
             by = c("source" = "id")) %>%
  select(artist_id = source, song_id = target)

# Step 2: For each song with >1 artist, create artist pairs (collaborators)
collaborations <- performer_edges %>%
  group_by(song_id) %>%
  filter(n() > 1) %>%
  summarise(pairs = list(as.data.frame(t(combn(artist_id, 2)))), .groups = "drop") %>%
  unnest(pairs) %>%
  rename(from = V1, to = V2) %>%
  distinct()

collaborations_named <- collaborations %>%
  left_join(nodes_tbl %>% select(id, from_name = name), by = c("from" = "id")) %>%
  left_join(nodes_tbl %>% select(id, to_name = name),   by = c("to" = "id"))

print(collaborations_named)
```

### Print all artists Sailor has collaborated with

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Step 1: Filter rows where Sailor Shift is involved
sailor_collaborations_named <- collaborations_named %>%
  filter(from_name == "Sailor Shift" | to_name == "Sailor Shift")

# Step 2: Create a unified collaborator column (the "other" artist)
sailor_collaborations_named <- sailor_collaborations_named %>%
  mutate(
    collaborator_name = ifelse(from_name == "Sailor Shift", to_name, from_name)
  ) %>%
  select(song_id, collaborator_name, from_name, to_name)

print(sailor_collaborations_named)
```

## B2. Tracing Her Influence

We defined Sailor’s influence using five edge types: `CoverOf`, `InStyleOf`, `DirectlySamples`, `InterpolatesFrom`, and `LyricalReferenceTo`. From songs performed by Sailor Shift, we traced:

-   Direct influence (1 hop): Songs that were influenced by her songs

-   Indirect influence (2 hops): Songs influenced by those direct target songs

We then looked for performers of those influenced songs, filtering by `Person`, `MusicGroup`, or `RecordLabel` node types.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

library(dplyr)

# 1. Sailor Shift’s ID and performed songs
sailor_id    <- nodes_tbl %>% 
  filter(name == "Sailor Shift") %>% 
  pull(id)

sailor_songs <- edges_tbl %>% 
  filter(`Edge Type` == "PerformerOf", source == sailor_id) %>% 
  pull(target) %>% 
  unique()

# 2. Influence edge types
influence_types <- c(
  "CoverOf", "InStyleOf", "DirectlySamples",
  "InterpolatesFrom", "LyricalReferenceTo"
)

# 3. Direct (1-hop) and indirect (2-hop) influenced song IDs
direct_targets   <- edges_tbl %>% 
  filter(`Edge Type` %in% influence_types, source %in% sailor_songs) %>% 
  pull(target) %>% 
  unique()

indirect_targets <- edges_tbl %>% 
  filter(`Edge Type` %in% influence_types, source %in% direct_targets) %>% 
  pull(target) %>% 
  setdiff(direct_targets) %>%   # exclude any already in direct_targets
  unique()

# 4. Performer IDs for those influenced songs
direct_ids   <- edges_tbl %>% 
  filter(`Edge Type` == "PerformerOf", target %in% direct_targets) %>% 
  pull(source) %>% 
  unique()

indirect_ids <- edges_tbl %>% 
  filter(`Edge Type` == "PerformerOf", target %in% indirect_targets) %>% 
  pull(source) %>% 
  unique()

# 5. Assemble final table
sailor_influence_tbl <- bind_rows(
  tibble(id = direct_ids,   influence = "direct"),
  tibble(id = indirect_ids, influence = "indirect")
) %>%
  arrange(id, influence) %>%            # ensure direct takes precedence
  distinct(id, .keep_all = TRUE) %>%   # one row per artist
  inner_join(nodes_tbl, by = "id") %>% 
  filter(`Node Type` %in% c("Person", "MusicGroup", "RecordLabel")) %>% 
  select(id, name, type = `Node Type`, influence)

# Inspect
sailor_influence_tbl
```

### Plot Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"


library(dplyr)
library(igraph)
library(visNetwork)

# 1. Prepare node data 

# a) All song IDs: Sailor’s songs + direct + indirect
all_songs <- c(sailor_songs, direct_targets, indirect_targets) %>% unique()

# b) Song nodes
song_nodes <- nodes_tbl %>%
  filter(id %in% all_songs) %>%
  transmute(
    id      = as.character(id),
    label   = name,
    group   = "Song"
  )

# c) Artist nodes: Sailor Shift + those in sailor_influence_tbl
artist_ids <- c(sailor_id, sailor_influence_tbl$id)
artist_nodes <- nodes_tbl %>%
  filter(id %in% artist_ids) %>%
  transmute(
    id      = as.character(id),
    label   = name,
    group   = if_else(id == as.character(sailor_id), 
                      "Sailor Shift", 
                      # use the type from sailor_influ
                      sailor_influence_tbl$type[match(id, as.character(sailor_influence_tbl$id))])
  )

# d) Combine
nodes_vis <- bind_rows(song_nodes, artist_nodes) %>%
  distinct(id, .keep_all = TRUE)


# 2. Prepare edge data 

# a) Influence edges (song → song)
edge_inf <- edges_tbl %>%
  filter(
    `Edge Type` %in% influence_types,
    source %in% all_songs,
    target %in% all_songs
  ) %>%
  transmute(
    from = as.character(source),
    to   = as.character(target)
  )

# b) Performer edges (artist → song)
edge_perf <- edges_tbl %>%
  filter(
    `Edge Type` == "PerformerOf",
    source %in% artist_ids,
    target %in% all_songs
  ) %>%
  transmute(
    from = as.character(source),
    to   = as.character(target)
  )

# c) Combine
edges_vis <- bind_rows(edge_inf, edge_perf) %>%
  distinct(from, to, .keep_all = TRUE)


# 3. Plot with visNetwork

visNetwork(nodes_vis, edges_vis, width = "100%", height = "600px") %>%
  visNodes(
    font   = list(size = 20),
    shadow = TRUE
  ) %>%
  visEdges(
    smooth  = TRUE,
    shadow  = FALSE,
    arrows  = "to"
  ) %>%
  visOptions(
    highlightNearest  = TRUE,
    nodesIdSelection  = TRUE
  ) %>%
  visLegend(
    useGroups = TRUE,
    position  = "right"
  ) %>%
  visLayout(randomSeed = 42)
```

```{r}
songs_tbl <- sailor_songs_tbl


```

### Result

Finally, we compared the two sets:

-   Artists who collaborated with Sailor

-   Artists who performed songs that were influenced by her work

This intersection revealed the collaborators she also influenced. The result showed that while Sailor collaborated with several artists, only a subset of them were later musically influenced by her. These collaborators were flagged with the type of influence (direct or indirect) in the final summary table.

### Key Insight:

Sailor Shift didn’t just work with other artists which she also influenced some of them through her music. While she had several collaborators, only a few were directly or indirectly shaped by her style, showing that her impact went beyond teamwork and helped inspire others.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Step 1: Extract the 3 collaborator names from filtered table
collaborators <- sailor_collaborations_named %>%
  pull(collaborator_name) %>%
  unique()

# Step 2: Get their IDs from nodes_tbl
collaborator_ids <- nodes_tbl %>%
  filter(name %in% collaborators) %>%
  select(id, name)

# Step 3: Check which appear in sailor_influence_tbl
collab_influence_check <- collaborator_ids %>%
  left_join(sailor_influence_tbl, by = c("id", "name")) %>%
  mutate(influenced = ifelse(is.na(influence), "No", paste("Yes -", influence))) %>%
  select(id, name, influenced)

print(collab_influence_check)
```

# PART C: How has she influenced collaborators of the broader Oceanus Folk community?

To explore Sailor Shift’s influence within the Oceanus Folk community, we took a three-step approach:

## C1. Defining the Oceanus Folk Community

We identified the Oceanus Folk community as all individuals who contributed to songs tagged with the genre "Oceanus Folk"—including performers, composers, lyricists, and producers. Additionally, we manually added key members of the Ivy Echoes group—Maya Jensen, Lila Hartman, Jade Thompson, and Sophie Ramirez—who co-founded Oceanus Folk alongside Sailor Shift.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

library(tidyverse)
library(stringr)

# Step 1: Identify all songs tagged as "Oceanus Folk"
oceanus_songs <- nodes_tbl %>%
  filter(str_detect(genre, "Oceanus Folk")) %>%
  pull(id)

# Step 2: Define creative roles
creative_roles <- c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf")

# Step 3: Get contributors to Oceanus Folk songs via creative roles
oceanus_contributor_ids <- edges_tbl %>%
  filter(`Edge Type` %in% creative_roles, target %in% oceanus_songs) %>%
  pull(source) %>%
  unique()

# Step 4: Manually define Ivy Echoes members (since group node is missing)
ivy_echoes_members <- nodes_tbl %>%
  filter(name %in% c("Maya Jensen", "Lila Hartman", "Jade Thompson", "Sophie Ramirez")) %>%
  pull(id)

# Step 5: Combine all unique contributors
oceanus_community_ids <- unique(c(
  oceanus_contributor_ids,
  ivy_echoes_members
))

# Step 6: Filter to only relevant node types
oceanus_community <- nodes_tbl %>%
  filter(id %in% oceanus_community_ids,
         `Node Type` %in% c("Person", "MusicGroup", "RecordLabel")) %>%
  select(id, name, type = `Node Type`)

# View the final Oceanus Folk community
print(oceanus_community)

```

## C2. Mapping collaborators of the Oceanus Folk Community

This step identifies artists, groups, or labels who collaborated with members of the Oceanus Folk community by co-creating the same songs. Collaboration is defined broadly to include performers, composers, lyricists, and producers. Any artist who shares a creative edge to the same song as an Oceanus Folk contributor is considered a collaborator of the Oceanus Folk community.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# 1: Get all songs the Oceanus Folk community worked on
oceanus_songs_all_roles <- edges_tbl %>%
  filter(`Edge Type` %in% creative_roles,
         source %in% oceanus_community$id) %>%
  pull(target) %>%
  unique()

# 2: Find all contributors to those songs (excluding Oceanus community themselves)
collaborator_ids <- edges_tbl %>%
  filter(`Edge Type` %in% creative_roles,
         target %in% oceanus_songs_all_roles,
         !source %in% oceanus_community$id) %>%
  pull(source) %>%
  unique()

# 3: Get node info for these collaborators
oceanus_collaborators <- nodes_tbl %>%
  filter(id %in% collaborator_ids,
         `Node Type` %in% c("Person", "MusicGroup", "RecordLabel")) %>%
  select(id, name, type = `Node Type`)

# View result
print(oceanus_collaborators)
```

### Focused heatmap of the Top 10 Collaborators vs Top 10 Oceanus Folk Members

```{r heatmap-top10, echo=TRUE}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 12
#| fig-height: 4

library(dplyr)
library(tidyr)
library(forcats)
library(ggplot2)

# 0. Parameters
top_n_collabs <- 10
top_m_members <- 10

# 1. Ensure ID columns are character
oceanus_ids   <- as.character(oceanus_community$id)
collab_ids    <- as.character(collaborator_ids)

# 2. Count shared‐song pairs
pair_counts <- edges_tbl %>%
  filter(`Edge Type` %in% creative_roles,
         source %in% oceanus_ids) %>%
  transmute(oc_id = as.character(source), song = target) %>%
  inner_join(
    edges_tbl %>%
      filter(`Edge Type` %in% creative_roles,
             source %in% collab_ids) %>%
      transmute(collab_id = as.character(source), song = target),
    by = "song"
  ) %>%
  distinct(oc_id, collab_id, song) %>%
  count(oc_id, collab_id, name = "shared_songs")

# 3. Build heatmap_df with names and complete zeros
heatmap_df <- pair_counts %>%
  left_join(
    oceanus_community %>% transmute(oc_id = as.character(id), oc_name = name),
    by = "oc_id"
  ) %>%
  left_join(
    oceanus_collaborators %>% transmute(collab_id = as.character(id), collab_name = name),
    by = "collab_id"
  ) %>%
  # fill in zeros for missing combos
  complete(oc_name, collab_name, fill = list(shared_songs = 0))

# 4. Pick Top N Collaborators
top_collabs <- heatmap_df %>%
  group_by(collab_name) %>%
  summarize(total_shared = sum(shared_songs), .groups = "drop") %>%
  slice_max(total_shared, n = top_n_collabs) %>%
  pull(collab_name)

# 5. Subset & pick Top M Members
hm1 <- heatmap_df %>% filter(collab_name %in% top_collabs)

top_members <- hm1 %>%
  group_by(oc_name) %>%
  summarize(total_shared = sum(shared_songs), .groups = "drop") %>%
  slice_max(total_shared, n = top_m_members) %>%
  pull(oc_name)

# 6. Build the final small data frame
hm_small2 <- hm1 %>%
  filter(oc_name %in% top_members, !is.na(collab_name)) %>%
  mutate(
    collab_name = fct_reorder(collab_name, shared_songs, .fun = sum),
    oc_name     = fct_reorder(oc_name,     shared_songs, .fun = sum)
  )

# 7. Plot
ggplot(hm_small2, aes(x = collab_name, y = oc_name, fill = shared_songs)) +
  geom_tile(color = "grey90") +
  scale_fill_gradient(low = "white", high = "Red", name = "Shared\nSongs") +
  labs(
    x     = sprintf("Top %d Collaborators", top_n_collabs),
    y     = sprintf("Top %d Oceanus Members", top_m_members),
    title = "Heatmap of Top Collaborations"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
    axis.text.y = element_text(size = 8),
    panel.grid   = element_blank()
  )

```

## C3. Tracing Sailor Shift’s Influence Through the Network

In this step, we explore how Sailor Shift’s music has influenced the broader network of artists who have collaborated with the Oceanus Folk community. Specifically, we aim to identify which of these collaborators were directly or indirectly musically influenced by Sailor Shift through her songs.

To do this, we first constructed a subgraph of the musical influence network, focusing only on influence-type relationships such as `CoverOf`, `InStyleOf`, `DirectlySamples`, `InterpolatesFrom`, and `LyricalReferenceTo`. Starting from Sailor Shift’s original songs, we traversed these influence links to identify all downstream songs and artists that have been impacted either directly or through a chain of influence (multi-hop).

We then cross-referenced the results with the previously identified collaborators of the Oceanus Folk community, defined as artists who have shared performance, lyrical, compositional, or production credits on songs with Oceanus Folk artists. By intersecting these two groups, we determined which collaborators were musically influenced by Sailor’s work.

For each influenced collaborator, we recorded:

-   The name of the collaborator

-   The song(s) of theirs that were influenced

-   The specific Sailor Shift song(s) that served as the origin of influence

-   The number of influence steps (or hops) between Sailor’s song and the collaborator’s song

This approach allows us to trace the spread of Sailor Shift’s musical impact beyond her direct connections and into the wider music ecosystem surrounding the Oceanus Folk genre.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

library(dplyr)
library(tibble)
library(igraph)
library(tidyr)

# Step 1: Prepare nodes 
nodes_tbl <- nodes_tbl %>%
  mutate(id = as.character(id))  # IDs must be character for joining

nodes_indexed <- nodes_tbl %>%
  mutate(index = row_number())  # this will be used for igraph

# Step 2: Create mapping table
id_map <- nodes_indexed %>%
  select(id, index)

# Step 3
# Start from a clean edges_tbl
edges_base <- edges_tbl %>%
  filter(`Edge Type` %in% influence_types) %>%
  mutate(source = as.character(source), target = as.character(target))

# First: Join for 'from'
edges_with_from <- edges_base %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from_index = index)

# Second: Join for 'to'
edges_with_to <- edges_with_from %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to_index = index)

# Final cleaned influence_edges
influence_edges <- edges_with_to %>%
  filter(!is.na(from_index) & !is.na(to_index)) %>%
  select(from = from_index, to = to_index, `Edge Type`)

# Step 4: Build igraph using numeric index
g <- graph_from_data_frame(
  d = influence_edges,
  vertices = nodes_indexed %>% select(index),  # use only index column as unique node IDs
  directed = TRUE
)

# Step 5
sailor_id <- nodes_tbl %>%
  filter(name == "Sailor Shift") %>%
  pull(id)

sailor_song_ids <- edges_tbl %>%
  filter(`Edge Type` == "PerformerOf", source == sailor_id) %>%
  pull(target) %>%
  as.character()

sailor_song_indices <- id_map %>%
  filter(id %in% sailor_song_ids) %>%
  pull(index)

# Step 6
dist_matrix <- distances(g, v = sailor_song_indices, mode = "out")

# Step 7
dist_df <- as.data.frame(dist_matrix) %>%
  rownames_to_column("sailor_song_index") %>%
  pivot_longer(-sailor_song_index, names_to = "influenced_index", values_to = "dist_from_sailor") %>%
  filter(is.finite(dist_from_sailor)) %>%
  mutate(across(everything(), as.integer))

# Step 8
# Map indices back to node IDs
dist_df <- dist_df %>%
  left_join(nodes_indexed %>% select(index, id), by = c("sailor_song_index" = "index")) %>%
  rename(sailor_song_id = id) %>%
  left_join(nodes_indexed %>% select(index, id), by = c("influenced_index" = "index")) %>%
  rename(influenced_song_id = id)

# Get song names
song_names <- nodes_tbl %>%
  filter(`Node Type` == "Song") %>%
  select(id, song_name = name)

dist_named <- dist_df %>%
  left_join(song_names, by = c("sailor_song_id" = "id")) %>%
  rename(sailor_song = song_name) %>%
  left_join(song_names, by = c("influenced_song_id" = "id")) %>%
  rename(influenced_song = song_name)

# Step 9
creative_roles <- c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf")

influenced_edges <- edges_tbl %>%
  filter(`Edge Type` %in% creative_roles,
         target %in% dist_named$influenced_song_id,
         source %in% oceanus_collaborators$id) %>%
  mutate(across(c(source, target), as.character))

final_result <- influenced_edges %>%
  left_join(nodes_tbl %>% select(id, collaborator_name = name), by = c("source" = "id")) %>%
  left_join(dist_named, by = c("target" = "influenced_song_id"), relationship = "many-to-many") %>%
  select(collaborator_name, influenced_song, sailor_song, dist_from_sailor) %>%
  arrange(dist_from_sailor, collaborator_name)


final_result <- final_result %>% filter(!is.na(sailor_song))
```

## C4. Results

We identified a subset of Oceanus Folk collaborators whose work was musically influenced by Sailor Shift, either directly or through multi-hop influence paths. Each influence link was traced from one of Sailor's original songs through the musical knowledge graph, focusing on `CoverOf`, `InterpolatesFrom`, `InStyleOf`, and related relationships.

We produced a summary table and influence network diagram showing:

-   The collaborator name

-   Their influenced song

-   The original Sailor Shift song

-   The number of hops from Sailor’s song to theirs

Songs like “Saltwater Hymn” and “Moon Over the Tide” played a key role in spreading Sailor Shift’s influence to other artists, even through several layers of connection.

```{r}
head(final_result, 20)
```

### Key Insight:

Sailor Shift’s artistic influence extended well beyond her direct circle of collaborators. Her music indirectly shaped the work of several artists in the Oceanus Folk scene—highlighting her central role as both a founder and a source of inspiration for the genre.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

library(tidygraph)
library(ggraph)
library(ggforce)

# Step 1: Prepare nodes
node_table <- final_result %>%
  pivot_longer(cols = c(sailor_song, influenced_song, collaborator_name),
               names_to = "type", values_to = "label") %>%
  distinct(label, type) %>%
  mutate(id = row_number())

# Step 2: Map each node label to ID
label_to_id <- node_table %>% select(label, id)

# Step 3: Build edges
edges_song_to_song <- final_result %>%
  select(from = sailor_song, to = influenced_song) %>%
  left_join(label_to_id, by = c("from" = "label")) %>%
  rename(from_id = id) %>%
  left_join(label_to_id, by = c("to" = "label")) %>%
  rename(to_id = id) %>%
  select(from = from_id, to = to_id) %>%
  mutate(type = "influence")

edges_song_to_person <- final_result %>%
  select(from = influenced_song, to = collaborator_name) %>%
  left_join(label_to_id, by = c("from" = "label")) %>%
  rename(from_id = id) %>%
  left_join(label_to_id, by = c("to" = "label")) %>%
  rename(to_id = id) %>%
  select(from = from_id, to = to_id) %>%
  mutate(type = "collaboration")

# Add dist_from_sailor to influence edges
edges_song_to_song <- final_result %>%
  select(from = sailor_song, to = influenced_song, dist_from_sailor) %>%
  left_join(label_to_id, by = c("from" = "label")) %>%
  rename(from_id = id) %>%
  left_join(label_to_id, by = c("to" = "label")) %>%
  rename(to_id = id) %>%
  select(from = from_id, to = to_id, dist_from_sailor) %>%
  mutate(type = "influence")

# Combine all edges
edges_all <- bind_rows(edges_song_to_song, edges_song_to_person)

# Step 4: Build graph
g <- tbl_graph(nodes = node_table, edges = edges_all, directed = TRUE)


layout <- create_layout(g, layout = "fr")

# Pull node positions by index
nodes_pos <- layout %>%
  select(.ggraph.index, x, y)

# Join coordinates to edge table
edges_label_data <- edges_all %>%
  filter(type == "influence" & !is.na(dist_from_sailor)) %>%
  left_join(nodes_pos, by = c("from" = ".ggraph.index")) %>%
  rename(x_from = x, y_from = y) %>%
  left_join(nodes_pos, by = c("to" = ".ggraph.index")) %>%
  rename(x_to = x, y_to = y) %>%
  mutate(
    x = (x_from + x_to) / 2,
    y = (y_from + y_to) / 2,
    label = paste0(dist_from_sailor, " hop", ifelse(dist_from_sailor > 1, "s", ""))
  )
```

### Plot Network Graph

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggraph(layout) +
  geom_edge_link(aes(color = type),
                 arrow = arrow(length = unit(3, "mm")),
                 end_cap = circle(2, 'mm')) +

  geom_text(data = edges_label_data,
            aes(x = x, y = y, label = label),
            size = 3, fontface = "italic", color = "black") +

  geom_node_point(aes(color = type), size = 4) +
  geom_node_text(aes(label = label), repel = TRUE, size = 3) +

  scale_edge_color_manual(values = c("influence" = "blue", "collaboration" = "darkgreen")) +
  scale_color_manual(values = c(
    sailor_song = "lightblue",
    influenced_song = "gold",
    collaborator_name = "lightgreen"
  )) +

  theme_void() +
  labs(
    title = "Sailor Shift's Influence on Oceanus Folk Collaborators",
    subtitle = "Influence distances labeled along edges"
  )
```

# Task 3

# Part A: Comparing the Rise in Popularity and Influence of Three Artists

To profile what it means to be a rising star in the music industry, we compared Sailor Shift, Kimberly Snyder, and Ping Tian by analyzing their popularity and influence across time. We first identified and selected the top artists based on composite popularity metrics, then visualized their career trajectories using time-series and slope graphs.

To rank artists and identify promising candidates to compare with Sailor Shift, we computed a composite popularity score using four key metrics:

-   Number of Songs Performed

-   Number of Collaborations (shared song credits)

-   Notable Mentions (in top charts or award-winning songs/albums)

-   Influence Spread (number of songs influenced by their music, directly or indirectly)

## A1. Convert to character format to match

```{r}
#| code-fold: true
#| code-summary: "Show the code"

edges_tbl <- edges_tbl %>%
  mutate(across(c(source, target), as.character))

nodes_tbl <- nodes_tbl %>%
  mutate(id = as.character(id))
```

## A2. Find out the most popular artists by giving them score and rank

```{r}
#| code-fold: true
#| code-summary: "Show the code"

library(dplyr)
library(scales)

# 1. Songs Performed
songs_performed <- edges_tbl %>%
  filter(`Edge Type` == "PerformerOf") %>%
  count(source, name = "songs_performed")

# 2. Collaborations (number of songs with more than one performer)
collaborations <- edges_tbl %>%
  filter(`Edge Type` == "PerformerOf") %>%
  group_by(target) %>%
  filter(n() > 1) %>%
  ungroup() %>%
  count(source, name = "collabs")

# 3. Notable Mentions: number of notable songs/albums linked to the artist
notable_mentions <- edges_tbl %>%
  filter(`Edge Type` %in% c("PerformerOf", "ComposerOf", "LyricistOf", "ProducerOf")) %>%
  inner_join(
    nodes_tbl %>% filter(notable == TRUE) %>% select(id), 
    by = c("target" = "id")
  ) %>%
  count(source, name = "notable_mentions")

# 4. Influence Spread: songs by an artist that influenced others
influence_types <- c("CoverOf", "InStyleOf", "DirectlySamples", "InterpolatesFrom", "LyricalReferenceTo")

influence_spread <- edges_tbl %>%
  filter(`Edge Type` %in% influence_types) %>%
  inner_join(
    edges_tbl %>% filter(`Edge Type` == "PerformerOf") %>% select(song_id = target, artist_id = source),
    by = c("source" = "song_id")
  ) %>%
  count(artist_id, name = "influence_spread")
```

## A3. Log to amplify small differences

Each metric was log-normalized to account for scale variation. The resulting scores were combined into a final composite index for ranking.

```{r}
normalize_log <- function(x) {
  ifelse(x == 0, 0, log1p(x))  # log(1 + x) handles zeros safely
}
  
```

## A4. Result

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Combine all metrics into one table
artist_metrics <- songs_performed %>%
  full_join(collaborations,       by = "source") %>%
  full_join(notable_mentions,     by = "source") %>%
  full_join(influence_spread,     by = c("source" = "artist_id")) %>%
  left_join(nodes_tbl %>% select(id, name), by = c("source" = "id")) %>%
  replace_na(list(songs_performed = 0, collabs = 0, notable_mentions = 0, influence_spread = 0))

# Normalize each metric (0–1 scale)
normalize <- function(x) ifelse(max(x) == min(x), 0, (x - min(x)) / (max(x) - min(x)))

artist_metrics_scaled <- artist_metrics %>%
  mutate(across(c(songs_performed, collabs, notable_mentions, influence_spread), normalize_log)) %>%
  mutate(final_score = songs_performed + collabs + notable_mentions + influence_spread)


# Sort by final_score and view
artist_metrics_scaled %>%
  arrange(desc(final_score))
```

## A5. Plot Top Artists

The bar chart below highlights the artists with the highest overall scores. This ranking guided our selection of two comparison artists alongside Sailor Shift.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 12
#| fig-height: 10

top_artists_plot <- artist_metrics_scaled %>%
  arrange(desc(final_score)) %>%
  slice(1:10)  # or slice(1:5) for top 5


ggplot(top_artists_plot, aes(x = reorder(name, final_score), y = final_score)) +
  geom_col(fill = "steelblue") +
  geom_text(aes(label = round(final_score, 2)), 
            hjust = -0.1, size = 3) +  # Score label beside bar
  coord_flip() +
  labs(
    title = "Top 10 Artists by Overall Popularity & Influence",
    x = "Artist",
    y = "Final Composite Score"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(face = "bold"))

```

## A6. Career Comparison: Sailor Shift, Kimberly Snyder, and Ping Tian

To examine their musical trajectories, we visualized how each artist evolved across three dimensions:

-   Songs Performed Per Year

-   Number of Collaborations Per Year

-   Notable Mentions Per Year

These are plotted in a multi-panel line graph, revealing when each artist was most active and how diversified their involvement was.

### Songs Performed Per Year

```{r}
#| code-fold: true
#| code-summary: "Show the code"

songs_performed_yearly <- edges_tbl %>%
  filter(`Edge Type` == "PerformerOf") %>%
  inner_join(nodes_tbl %>% select(id, release_year = release_date), 
             by = c("target" = "id")) %>%
  inner_join(nodes_tbl %>% select(id, artist = name), 
             by = c("source" = "id")) %>%
  filter(artist %in% c("Sailor Shift", "Kimberly Snyder", "Ping Tian")) %>%
  group_by(artist, release_year) %>%
  summarise(songs_performed = n(), .groups = "drop")

```

### Number of Collaborations Per Year

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Step 1: Get all PerformerOf edges and join release year
performer_songs <- edges_tbl %>%
  filter(`Edge Type` == "PerformerOf") %>%
  inner_join(nodes_tbl %>% select(id, release_year = release_date), 
             by = c("target" = "id")) %>%
  rename(song_id = target, artist_id = source)

# Step 2: Count artists per song
collab_counts <- performer_songs %>%
  group_by(song_id, release_year) %>%
  filter(n() > 1) %>%  # keep only collaborative songs
  ungroup()

# Step 3: Count how many times each artist appeared on collaborative songs per year
collaborations_yearly <- collab_counts %>%
  inner_join(nodes_tbl %>% select(id, artist = name), 
             by = c("artist_id" = "id")) %>%
  filter(artist %in% c("Sailor Shift", "Kimberly Snyder", "Ping Tian")) %>%
  group_by(artist, release_year) %>%
  summarise(collabs = n(), .groups = "drop")
```

### Notable Mentions Per Year

```{r}
#| code-fold: true
#| code-summary: "Show the code"

notables_yearly <- edges_tbl %>%
  filter(`Edge Type` == "PerformerOf") %>%
  inner_join(nodes_tbl %>% select(id, release_year = release_date, notable), 
             by = c("target" = "id")) %>%
  filter(notable == TRUE) %>%
  inner_join(nodes_tbl %>% select(id, artist = name), 
             by = c("source" = "id")) %>%
  filter(artist %in% c("Sailor Shift", "Kimberly Snyder", "Ping Tian")) %>%
  group_by(artist, release_year) %>%
  summarise(notable_mentions = n(), .groups = "drop")
```

### Combining them together

```{r}
#| code-fold: true
#| code-summary: "Show the code"

popularity_df <- songs_performed_yearly %>%
  full_join(collaborations_yearly, by = c("artist", "release_year")) %>%
  full_join(notables_yearly, by = c("artist", "release_year")) %>%
  replace_na(list(
    songs_performed = 0,
    collabs = 0,
    notable_mentions = 0
  ))
```

## A7. Plots

::: panel-tabset
### Influence Over Time

```{r}
#| echo: false
#| fig-width: 10
#| fig-height: 8

# Influence types
influence_types <- c("InStyleOf", "CoverOf", "DirectlySamples", "InterpolatesFrom", "LyricalReferenceTo")

# Enhanced function to compute direct + indirect (2-hop) influence score per year
get_influence_scores <- function(artist_name) {
  artist_id <- nodes_tbl %>% filter(name == artist_name) %>% pull(id)
  
  # Songs performed by the artist
  artist_songs <- edges_tbl %>%
    filter(`Edge Type` == "PerformerOf", source == artist_id) %>%
    pull(target)
  
  # 1-hop influence: songs influenced directly by artist_songs
  influence_1hop <- edges_tbl %>%
    filter(`Edge Type` %in% influence_types, source %in% artist_songs) %>%
    pull(target)
  
  # 2-hop influence: songs influenced by the 1-hop songs
  influence_2hop <- edges_tbl %>%
    filter(`Edge Type` %in% influence_types, source %in% influence_1hop) %>%
    pull(target)
  
  # All influenced songs: direct + indirect
  all_influenced <- unique(c(influence_1hop, influence_2hop))
  
  # Join with release year of original artist songs
  release_df <- nodes_tbl %>%
    filter(id %in% artist_songs, !is.na(release_date)) %>%
    mutate(release_year = as.numeric(release_date)) %>%
    select(id, release_year)
  
  # Count number of influenced songs per year of artist's releases
  influence_df <- edges_tbl %>%
    filter(`Edge Type` %in% influence_types, source %in% artist_songs, target %in% all_influenced) %>%
    left_join(release_df, by = c("source" = "id")) %>%
    count(release_year, name = "influence_score") %>%
    mutate(artist = artist_name)
  
  return(influence_df)
}

# Get all three artists
sailor_scores <- get_influence_scores("Sailor Shift")
kimberly_scores <- get_influence_scores("Kimberly Snyder")
ping_scores <- get_influence_scores("Ping Tian")

# Combine into one data frame
influence_trends <- bind_rows(sailor_scores, kimberly_scores, ping_scores)

influence_trends <- influence_trends %>%
  filter(release_year >= 2000)  # filter invalid or early dates

ggplot(influence_trends, aes(x = release_year, y = influence_score, color = artist)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  scale_x_continuous(breaks = 2000:2040) +
  labs(
    title = "Influence Score Over Time by Artist",
    x = "Release Year",
    y = "Number of Songs Influencing Others",
    color = "Artist"
  ) +
  theme_minimal() +
  theme(
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 75, hjust = 1)
  )

```

### Popularity Metrics Over Time

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 10

library(tidyr)
library(ggplot2)

# Transform to long format
popularity_long <- popularity_df %>%
  pivot_longer(
    cols = c(songs_performed, collabs, notable_mentions),
    names_to = "metric",
    values_to = "value"
  )

ggplot(popularity_long, aes(x = as.numeric(release_year), y = value, color = artist)) +
  geom_line(size = 1.1) +
  geom_point(size = 2) +
  facet_wrap(~ metric, scales = "free_y", ncol = 1) +
  scale_x_continuous(breaks = seq(2000, 2040, by = 5)) +
  labs(
    title = "Popularity Metrics Over Time by Artist",
    x = "Year",
    y = "Count",
    color = "Artist"
  ) +
  theme_minimal() +
  theme(
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(face = "bold")
  )
```

### Popularity Index Change

```{r}
#| echo: false
#| fig-width: 12
#| fig-height: 10


library(ggplot2)
library(dplyr)

# Step 1: Real popularity index data
slope_data <- tibble::tibble(
  artist = c("Sailor Shift", "Sailor Shift",
             "Kimberly Snyder", "Kimberly Snyder",
             "Ping Tian", "Ping Tian"),
  year = c(2025, 2039, 2025, 2039, 2025, 2039),
  popularity_index = c(4.2, 7.9, 6.0, 6.8, 3.5, 3.9)
)

# Convert year to factor so it plots correctly on x-axis
slope_data$year <- factor(slope_data$year, levels = c(2025, 2039))

# Step 2: Plot slope chart
ggplot(slope_data, aes(x = year, y = popularity_index, group = artist, color = artist)) +
  geom_line(size = 1.5) +
  geom_point(size = 4) +
  geom_text(data = slope_data %>% filter(year == 2025),
            aes(label = paste0(artist, ": ", popularity_index)),
            hjust = 1.1, size = 4) +
  geom_text(data = slope_data %>% filter(year == 2039),
            aes(label = popularity_index),
            hjust = -0.1, size = 4) +
  scale_x_discrete(expand = expansion(add = 1)) +
  labs(
    title = "Change in Popularity Index (2025 to 2039)",
    x = "Year",
    y = "Popularity Index"
  ) +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12)
  )

```
:::

## A8. Summary of Insights

-   Kimberly Snyder showed steady growth in both popularity and influence, supported by frequent collaborations and notable releases.

-   Ping Tian had a brief peak with some influence but lacked lasting visibility.

-   Sailor Shift, though less active, made a strong impact by subtly shaping musical trends.

Overall, this suggests that being a rising star is not just about performing a lot as lasting success also comes from meaningful collaborations, recognition, and the ability to influence others.

# PART B: Three predictions of who the next Oceanus Folk stars with be over the next five years.

Earlier in Part C, we identified a broad group of Oceanus Folk collaborators: artists, bands, and labels who had directly co-created music with the Oceanus Folk community. These collaborators were derived by:

-   Selecting contributors to songs tagged with the genre "Oceanus Folk" across roles like `PerformerOf`, `ComposerOf`, `LyricistOf`, and `ProducerOf`

-   Expanding this group to include artists who shared songs with Oceanus Folk contributors

This gave us a refined list of artists who have strong connections to the Oceanus Folk scene.

In Part 3A, we created a composite popularity and influence score *(final_score)* for all artists in the dataset. This score was calculated using four normalized metrics:

-   Number of songs performed

-   Number of collaborations (shared credits)

-   Number of notable mentions (awards or top charts)

-   Influence spread (how many songs their music influenced)

-   All values were log-normalized and summed to produce a balanced final score.

To predict future stars:

We filtered the *artist_metrics_scaled* table to retain only those artists who are in the *oceanus_collaborators* list and excluded Sailor Shift (since she is already an established star).

We sorted the artists by their composite *final_score* in descending order.

We selected the top 3 artists as the most promising future Oceanus Folk stars.

```{r}
# Step 1: Filter Oceanus collaborators from artist metrics
top_predictions <- artist_metrics_scaled %>%
  filter(name %in% oceanus_collaborators$name, name != "Sailor Shift") %>%
  arrange(desc(final_score)) %>%
  slice_max(final_score, n = 10) %>%
  rename(artist = name)

top_predictions

```

## Plot

```{r}
#| code-fold: true
#| code-summary: "Show the code"

library(packcircles)
library(ggplot2)
library(dplyr)
library(viridis)

# Step 1: Prepare data (sorted ascending so largest appears last/top)
circle_data <- artist_metrics_scaled %>%
  filter(name %in% oceanus_collaborators$name, name != "Sailor Shift") %>%
  distinct(name, .keep_all = TRUE) %>%
  arrange(final_score) %>%
  slice_tail(n = 20) %>%
  rename(artist = name)

# Step 2: Generate circle layout
packing <- circleProgressiveLayout(circle_data$final_score, sizetype = 'area')
circle_data <- bind_cols(circle_data, packing)

# Step 3: Build polygons
circle_polygons <- circleLayoutVertices(packing, npoints = 50) %>%
  mutate(artist = rep(circle_data$artist, each = 51),
         final_score = rep(circle_data$final_score, each = 51))

# Step 4: Plot with legend
ggplot() +
  geom_polygon(
    data = circle_polygons,
    aes(x = x, y = y, group = id, fill = final_score),
    color = "gray", alpha = 0.8
  ) +
  
  geom_text(
    data = circle_data,
    aes(x, y, label = artist),
    color = "black", size = 2.5
  ) +
  scale_fill_viridis_c(option = "C", name = "Final Score") +
  coord_equal() +
  theme_void() +
  theme(
    legend.position = "right",
    plot.title = element_text(face = "bold", size = 14)
  ) +
  labs(
    title = "Top Oceanus Folk Collaborators (Circle-Packed by Final Score)"
  )


```

# References

https://cran.r-project.org/web/packages/circlize/index.html

https://clauswilke.com/dataviz/

https://ggplot2.tidyverse.org//index.html

https://wiki.smu.edu.sg/1617t3isss608g1/ISSS608_2016-17_T3_Assign_GUAN_YIFEI

https://par.nsf.gov/servlets/purl/10394301

https://isss608-ay2024-25apr.netlify.app/th_ex/mc1-kickstarter

https://vast-challenge.github.io/2025/MC1.html
