{
  "hash": "8662db652ec8afd3ed7a39a83371f681",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 4\"\nauthor: \"Marga Thura\"\ndate: \"May 07 2025\"\ndate-modified: \"May 07 2025\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# 9 Visualising Distribution\n\nVisualising distribution is not new in statistical analysis. In chapter 1, we have shared some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions.\n\n# 9.2 Getting Started\n\n## 9.2.1 Installing and loading the packages\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\n-   ggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\n\n-   ggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\n\n-   tidyverse, a family of R packages to meet the modern data science and visual communication needs,\n\n-   ggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\n\n-   colorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n\n## 9.2.2 Data import\n\nFor the purpose of this exercise, *Exam_data.csv* will be used.\n\nIn the code chunk below, `read_csv()` of [readr](https://readr.tidyverse.org/) package is used to import *Exam_data.csv* into R and saved it into a tibble data.frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"Data_04/Exam_data.csv\")\n```\n:::\n\n\n\n# 9.3 Visualising Distribution with Ridgeline Plot\n\n## 9.3.1 Plotting ridgeline graph: ggridges method\n\nggridges package provides two main geom to plot gridgeline plots, they are: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\n\nThe ridgeline plot below is plotted by using `geom_density_ridges()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## 9.3.2 Varying fill colors along the x axis\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). Both geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n## 9.3.3 Mapping the probabilities directly onto colour\n\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nFigure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## 9.3.4 Ridgeline plots with quantile lines\n\ny using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the figures below.\n\n::: panel-tabset\n## Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n:::\n\n\n\n## Specify quantiles by cut points\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n# 9.4 Visualising Distribution with Raincloud Plot\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. It gets the name because the density plot is in the shape of a “raincloud”. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\n\n## Plotting a Half Eye graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## Adding the boxplot with geom_boxplot()\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n## Adding the Dot Plots with stat_dots()\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## Finishing touch\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n**Reference**\n\n-   [Introducing Ridgeline Plots (formerly Joyplots)](https://blog.revolutionanalytics.com/2017/07/joyplots.html)\n\n-   Claus O. Wilke [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/) especially Chapter [6](https://clauswilke.com/dataviz/visualizing-amounts.html), [7](https://clauswilke.com/dataviz/histograms-density-plots.html), [8](https://clauswilke.com/dataviz/ecdf-qq.html), [9](https://clauswilke.com/dataviz/boxplots-violins.html) and [10](https://clauswilke.com/dataviz/visualizing-proportions.html).\n\n-   Allen M, Poggiali D, Whitaker K et al. [“Raincloud plots: a multi-platform tool for robust data. visualization”](https://wellcomeopenresearch.org/articles/4-63) \\[version 2; peer review: 2 approved\\]. Welcome Open Res 2021, pp. 4:63.\n\n-   [Dots + interval stats and geoms](https://mjskay.github.io/ggdist/articles/dotsinterval.html)\n\n# 10 Visual Statistical Analysis\n\nIn this hands-on exercise, we will be using:\n\n-   ggstatsplot package to create visual graphics with rich statistical information,\n\n-   performance package to visualise model diagnostics, and\n\n-   parameters package to visualise model parameters\n\nggstatsplot  is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves\n\n![](images/image2.jpg)\n\n## 10.1 Getting Started\n\n## 10.1.1 Installing and launching R packages\n\nIn this exercise, ggstatsplot and tidyverse will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggstatsplot, tidyverse)\n```\n:::\n\n\n\n## 10.1.2 Importing data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the tidyverse package\nlibrary(tidyverse)\n\n# Import the CSV file\nexam <- read_csv(\"Data_04/Exam_data.csv\")\n\n# Display the data as a tibble\nprint(exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows\n```\n\n\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}