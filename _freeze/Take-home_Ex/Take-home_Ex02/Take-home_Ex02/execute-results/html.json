{
  "hash": "8d3f647c6c3cd66191a42454429fc9ea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 2\"\nauthor: \"Marga Thura\"\ndate: \"May 13 2025\"\ndate-modified: \"May 17 2025\"\neditor: visual\nformat: html\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# Load the necessary libraries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)\n```\n:::\n\n\n\n# Read the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read JSON file\nmc1_data <- fromJSON(\"MC1_release/MC1_graph.json\")\n```\n:::\n\n\n\n# Overview the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc1_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n  ..$ node_default: Named list()\n  ..$ edge_default: Named list()\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n  ..$ Node Type     : chr [1:17412] \"Song\" \"Person\" \"Person\" \"Person\" ...\n  ..$ name          : chr [1:17412] \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n  ..$ single        : logi [1:17412] TRUE NA NA NA NA FALSE ...\n  ..$ release_date  : chr [1:17412] \"2017\" NA NA NA ...\n  ..$ genre         : chr [1:17412] \"Oceanus Folk\" NA NA NA ...\n  ..$ notable       : logi [1:17412] TRUE NA NA NA NA TRUE ...\n  ..$ id            : int [1:17412] 0 1 2 3 4 5 6 7 8 9 ...\n  ..$ written_date  : chr [1:17412] NA NA NA NA ...\n  ..$ stage_name    : chr [1:17412] NA NA NA NA ...\n  ..$ notoriety_date: chr [1:17412] NA NA NA NA ...\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n  ..$ Edge Type: chr [1:37857] \"InterpolatesFrom\" \"RecordedBy\" \"PerformerOf\" \"ComposerOf\" ...\n  ..$ source   : int [1:37857] 0 0 1 1 2 2 3 5 5 5 ...\n  ..$ target   : int [1:37857] 1841 4 0 16180 0 16180 0 5088 14332 11677 ...\n  ..$ key      : int [1:37857] 0 0 0 0 0 0 0 0 0 0 ...\n```\n\n\n:::\n:::\n\n\n\n# Inspecct structure\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mc1_data, max.level=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n```\n\n\n:::\n:::\n\n\n\n# Extract and Inspect\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_tbl <- as_tibble(mc1_data$nodes)\n\nedges_tbl <- as_tibble(mc1_data$links)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = edges_tbl, \n       aes(y = `Edge Type`)) +\n      geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n# Creating knowledge graph\n\nMapping from node id to row index. Ensure each id from your node list is mapped to the correct row number.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_map <- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  left_join(id_map, by = c(\"source\" = \"id\")) %>%\n  rename(from = index) %>%\n  left_join(id_map, by = c(\"target\" = \"id\")) %>%\n  rename(to = index)\n```\n:::\n\n\n\n# Remove the NA\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n filter(!is.na(from), !is.na(to))\n```\n:::\n\n\n\n# Creating the graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = mc1_data$directed)\n```\n:::\n\n\n\n# Visualising the knowledge graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n# Visualising the whole graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph %>%\n  activate(edges) %>% \n  filter(`Edge Type` == \"MemberOf\")\n```\n:::\n\n\n\n\n## Plot the sub-graph\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}