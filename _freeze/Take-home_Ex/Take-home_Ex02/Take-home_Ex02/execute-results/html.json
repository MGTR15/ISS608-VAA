{
  "hash": "3fab55b0da76d29866dd1bf5ae5459ed",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-Home Exercise 2\"\nauthor: \"Marga Thura\"\ndate: \"May 13 2025\"\ndate-modified: \"May 17 2025\"\neditor: visual\nformat: html\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n  fold: true\n---\n\n\n\n# Load the necessary libraries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph, packcircles, stringr, igraph, visNetwork, treemap)\n```\n:::\n\n\n\n# Read the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read JSON file\nmc1_data <- fromJSON(\"MC1_release/MC1_graph.json\")\n```\n:::\n\n\n\n# Overview the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc1_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n  ..$ node_default: Named list()\n  ..$ edge_default: Named list()\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n  ..$ Node Type     : chr [1:17412] \"Song\" \"Person\" \"Person\" \"Person\" ...\n  ..$ name          : chr [1:17412] \"Breaking These Chains\" \"Carlos Duffy\" \"Min Qin\" \"Xiuying Xie\" ...\n  ..$ single        : logi [1:17412] TRUE NA NA NA NA FALSE ...\n  ..$ release_date  : chr [1:17412] \"2017\" NA NA NA ...\n  ..$ genre         : chr [1:17412] \"Oceanus Folk\" NA NA NA ...\n  ..$ notable       : logi [1:17412] TRUE NA NA NA NA TRUE ...\n  ..$ id            : int [1:17412] 0 1 2 3 4 5 6 7 8 9 ...\n  ..$ written_date  : chr [1:17412] NA NA NA NA ...\n  ..$ stage_name    : chr [1:17412] NA NA NA NA ...\n  ..$ notoriety_date: chr [1:17412] NA NA NA NA ...\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n  ..$ Edge Type: chr [1:37857] \"InterpolatesFrom\" \"RecordedBy\" \"PerformerOf\" \"ComposerOf\" ...\n  ..$ source   : int [1:37857] 0 0 1 1 2 2 3 5 5 5 ...\n  ..$ target   : int [1:37857] 1841 4 0 16180 0 16180 0 5088 14332 11677 ...\n  ..$ key      : int [1:37857] 0 0 0 0 0 0 0 0 0 0 ...\n```\n\n\n:::\n:::\n\n\n\n# Inspect structure\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mc1_data, max.level=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     :List of 2\n $ nodes     :'data.frame':\t17412 obs. of  10 variables:\n $ links     :'data.frame':\t37857 obs. of  4 variables:\n```\n\n\n:::\n:::\n\n\n\n# Extract and Inspect\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_tbl <- as_tibble(mc1_data$nodes)\n\nedges_tbl <- as_tibble(mc1_data$links)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = edges_tbl, \n       aes(y = `Edge Type`)) +\n      geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = nodes_tbl,\n       aes(y = `Node Type`)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n# Creating knowledge graph\n\nMapping from node id to row index. Ensure each id from your node list is mapped to the correct row number.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid_map <- tibble(id = nodes_tbl$id,\n                 index = seq_len(\n                   nrow(nodes_tbl)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n  left_join(id_map, by = c(\"source\" = \"id\")) %>%\n  rename(from = index) %>%\n  left_join(id_map, by = c(\"target\" = \"id\")) %>%\n  rename(to = index)\n```\n:::\n\n\n\n# Remove the NA\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nedges_tbl <- edges_tbl %>%\n filter(!is.na(from), !is.na(to))\n```\n:::\n\n\n\n# Creating the graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph <- tbl_graph(nodes = nodes_tbl,\n                   edges = edges_tbl,\n                   directed = mc1_data$directed)\n```\n:::\n\n\n\n# Visualising the knowledge graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\n# Visualising the whole graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph, layout = \"fr\") +\n  geom_edge_link(alpha = 0.3,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 4) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n```\n:::\n\n\n\n# Filter edges to only MemberOf\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph %>%\n  activate(edges) %>% \n  filter(`Edge Type` == \"MemberOf\")\n```\n:::\n\n\n\n# Extract only connected nodes (used in the edges)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nused_nodes_indices <- graph_memberof %>%\n  activate(edges) %>%\n  as_tibble() %>%\n  select(from, to) %>%\n  unlist() %>%\n  unique()\n```\n:::\n\n\n\n# Keep only those nodes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngraph_memberof <- graph_memberof %>%\n  activate(nodes) %>%\n  mutate(row_id = row_number()) %>%\n  filter(row_id %in% used_nodes_indices) %>%\n  select(-row_id)\n```\n:::\n\n\n\n# Plot the sub-graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(graph_memberof,\n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.5,\n                 colour = \"gray\") +\n  geom_node_point(aes(color = `Node Type`),\n                  size = 1) +\n  geom_node_text(aes(label = name),\n                 repel = TRUE,\n                 size = 2.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n# Part A: Who has Sailor Shift been most influenced by over time?\n\nTo understand how Sailor Shift’s musical style has evolved, we examined the influence relationships affecting her songs over time. We defined influence using five edge types from the dataset: `InStyleOf`, `CoverOf`, `DirectlySamples`, `InterpolatesFrom`, and `LyricalReferenceTo`.\n\nWe began by identifying all songs performed by Sailor Shift and organizing them chronologically using their release dates. This temporal ordering allowed us to assess changes in external influences throughout her career.\n\nNext, we filtered the full graph to isolate influential edges targeting Sailor’s songs. These were joined with metadata to identify the artists, groups, or labels responsible for the original source of influence. To ensure accuracy, we also validated that the influencing node was a valid performer using song-to-performer relationships.\n\n## A1. Convert & Validate Dates\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check raw release_date format\nnodes_tbl %>%\n  select(name, release_date) %>%\n  filter(!is.na(release_date)) %>%\n  distinct(release_date) %>%\n  arrange(release_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 64 × 1\n   release_date\n   <chr>       \n 1 1975        \n 2 1977        \n 3 1979        \n 4 1980        \n 5 1981        \n 6 1982        \n 7 1983        \n 8 1984        \n 9 1985        \n10 1986        \n# ℹ 54 more rows\n```\n\n\n:::\n:::\n\n\n\n## A2. Check Sailor Shift’s song release date sorted chronologically\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Find Sailor Shift's ID\nsailor_id <- nodes_tbl %>%\n  filter(name == \"Sailor Shift\") %>%\n  pull(id)\n\n# 2. Get all songs she performed\nsailor_songs <- edges_tbl %>%\n  filter(`Edge Type` == \"PerformerOf\", source == sailor_id) %>%\n  pull(target)\n\n# 3. Retrieve and sort their release dates\nsailor_songs_tbl <- nodes_tbl %>%\n  filter(id %in% sailor_songs) %>%\n  select(id, name, release_date) %>%\n  mutate(release_year = as.numeric(release_date)) %>%\n  arrange(release_year)\n\n# 4. Print result\nprint(sailor_songs_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 26 × 4\n      id name                  release_date release_year\n   <int> <chr>                 <chr>               <dbl>\n 1 17272 Tidal Pop Waves       2028                 2028\n 2 17279 High Tide Heartbeat   2028                 2028\n 3 17280 Electric Eel Love     2028                 2028\n 4 17281 Sun-Drenched Daydream 2028                 2028\n 5 17282 Chord of the Deep     2028                 2028\n 6 17273 Salty Dreams          2030                 2030\n 7 17283 Heart of the Habitat  2030                 2030\n 8 17284 Reef Rhythm           2030                 2030\n 9 17285 Driftwood Lullaby     2030                 2030\n10 17410 Seashell Serenade     2030                 2030\n# ℹ 16 more rows\n```\n\n\n:::\n:::\n\n\n\n## A3. Influence Types\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfluence_types <- c(\n  \"InStyleOf\",\n  \"CoverOf\",\n  \"DirectlySamples\",\n  \"InterpolatesFrom\",\n  \"LyricalReferenceTo\"\n)\n```\n:::\n\n\n\n### Build influence data table\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfluences <- edges_tbl %>%\n  filter(`Edge Type` %in% influence_types)\n```\n:::\n\n\n\n### Plot influence\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninfluences %>%\n  count(`Edge Type`) %>%\n  ggplot(aes(x = reorder(`Edge Type`, n), y = n, fill = `Edge Type`)) +\n  geom_col(show.legend = FALSE) +\n  coord_flip() +\n  labs(title = \"How Sailor Shift Was Influenced\",\n       x = \"Type of Influence\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n## A4. Find the song released dates\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# 1. Define the years in which she released music\nyears <- sort(unique(sailor_songs_tbl$release_year))\n\nyears\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2028 2030 2031 2032 2034 2036 2038 2040\n```\n\n\n:::\n:::\n\n\n\n### Define influence_types\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nyearly_top_influencers <- \n  edges_tbl %>%\n  # 1. keep only influence edges\n  filter(`Edge Type` %in% influence_types) %>%\n  # 2. attach Sailor Shift song years (join on source → id)\n  inner_join(\n    sailor_songs_tbl,\n    by = c(\"source\" = \"id\")\n  ) %>%\n  # 3. bring in influencer name + node type\n  left_join(\n    nodes_tbl %>% select(id, influencer = name, type = `Node Type`),\n    by = c(\"target\" = \"id\")\n  ) %>%\n  # 4. tally per year + influencer\n  count(release_year, influencer, type, name = \"count\") %>%\n  # 5. pick the single top influencer each year\n  group_by(release_year) %>%\n  slice_max(count, n = 1, with_ties = FALSE) %>%\n  ungroup() %>%\n  arrange(release_year)\n\nprint(yearly_top_influencers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 4\n  release_year influencer                 type  count\n         <dbl> <chr>                      <chr> <int>\n1         2028 Addicted to Your Heartache Album     1\n2         2030 Echoes of Forgotten Light  Song      1\n3         2031 Dreamscape of Judgment     Song      1\n4         2032 Parallel Memories          Song      1\n5         2034 Divergent Memories         Song      1\n6         2036 Coastal Whispers of Biscay Song      1\n7         2038 Altitude of Mistakes       Song      1\n```\n\n\n:::\n:::\n\n\n\n### Build perf_map\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperf_map <- edges_tbl %>% \n  filter(`Edge Type` == \"PerformerOf\") %>% \n  select(influencer_song = target, \n         performer_id     = source)\n```\n:::\n\n\n\n### Build yearly_top_influencers_artists\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_top_influencers_artists <-\n  edges_tbl %>%\n  filter(`Edge Type` %in% influence_types) %>%\n  \n  # attach Sailor Shift’s song years\n  inner_join(sailor_songs_tbl, by = c(\"source\" = \"id\")) %>%\n  \n  # attach the song→performer mapping\n  inner_join(perf_map, by = c(\"target\" = \"influencer_song\")) %>%\n  \n  # get the performer’s name & node type\n  left_join(\n    nodes_tbl %>% select(id, influencer = name, type = `Node Type`),\n    by = c(\"performer_id\" = \"id\")\n  ) %>%\n  \n  # only keep real performers (Person / Music Group / Record Label)\n  filter(type %in% c(\"Person\", \"Music Group\", \"Record Label\")) %>%\n  \n  # count per year + performer\n  count(release_year, influencer, type, name = \"count\") %>%\n  \n  # pick the top performer each year\n  group_by(release_year) %>%\n  slice_max(count, n = 1, with_ties = FALSE) %>%\n  ungroup() %>%\n  arrange(release_year)\n\nprint(yearly_top_influencers_artists)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 4\n  release_year influencer       type   count\n         <dbl> <chr>            <chr>  <int>\n1         2028 Jeremiah Love    Person     1\n2         2030 Gang Shao        Person     1\n3         2031 Sandra Burke     Person     1\n4         2032 Guiying Ren      Person     1\n5         2034 Joshua Taylor    Person     1\n6         2036 Daniel Mccormick Person     1\n7         2038 Amico Luciani    Person     1\n```\n\n\n:::\n:::\n\n\n\nTo compare influence levels across different types (e.g., lyrical vs. stylistic), we computed normalized weights: rarer influence types were assigned higher scores to balance their impact in the analysis. For each year in which Sailor released music, we calculated a weighted influence score for every performer that influenced her that year.\n\n## A5. Build weighted counts\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Count how many times each Edge Type occurs\nbase_counts <- influences %>%\n  count(`Edge Type`, name = \"n\")\n\n# 2. Examine\nprint(base_counts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  `Edge Type`            n\n  <chr>              <int>\n1 CoverOf             1429\n2 DirectlySamples      619\n3 InStyleOf           2289\n4 InterpolatesFrom    1574\n5 LyricalReferenceTo  1496\n```\n\n\n:::\n:::\n\n\n\n### Auto_weights\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 3. Compute max frequency\nmax_n <- max(base_counts$n)\n\n# 4. Build the named weight vector\nauto_weights <- base_counts %>%\n  mutate(weight = max_n / n) %>%\n  select(`Edge Type`, weight) %>%\n  deframe()\n\nprint(auto_weights)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           CoverOf    DirectlySamples          InStyleOf   InterpolatesFrom \n          1.601819           3.697900           1.000000           1.454257 \nLyricalReferenceTo \n          1.530080 \n```\n\n\n:::\n:::\n\n\n\n### Build weights → weighted_top_by_year_auto\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweighted_top_by_year_auto <- edges_tbl %>%\n  filter(`Edge Type` %in% influence_types) %>%\n  inner_join(sailor_songs_tbl, by = c(\"source\" = \"id\")) %>%\n  inner_join(perf_map,         by = c(\"target\" = \"influencer_song\")) %>%\n  left_join(\n    nodes_tbl %>% select(id, performer = name, type = `Node Type`),\n    by = c(\"performer_id\" = \"id\")\n  ) %>%\n  filter(type %in% c(\"Person\", \"Music Group\", \"Record Label\")) %>%\n  mutate(weight = recode(`Edge Type`, !!!auto_weights)) %>%\n  group_by(release_year, performer, type) %>%\n  summarize(score = sum(weight), .groups = \"drop\") %>%\n  group_by(release_year) %>%\n  slice_max(score, n = 1, with_ties = FALSE) %>%\n  ungroup() %>%\n  arrange(release_year)\n\nprint(weighted_top_by_year_auto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 4\n  release_year performer         type   score\n         <dbl> <chr>             <chr>  <dbl>\n1         2028 Joanna Avery      Person  1.60\n2         2030 Samantha Bullock  Person  1.60\n3         2031 Sandra Burke      Person  1.60\n4         2032 Guiying Ren       Person  1   \n5         2034 Simone Säuberlich Person  1.60\n6         2036 James Medina      Person  1.45\n7         2038 Amico Luciani     Person  3.70\n```\n\n\n:::\n:::\n\n\n\n## A6. Most Influential Performer by Sailor Shift Release Year\n\nThe resulting chart below shows the top influencer by year, accounting for both the frequency and type of influence. Each bar represents a release year in Sailor’s career, annotated with the name of her top influencer *(person, group, or label)* and the cumulative influence score.\n\nThis approach reveals both consistent sources of inspiration and shifts in influence throughout her discography, offering insight into how her sound may have been shaped by key collaborators or predecessors.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(weighted_top_by_year_auto,\n       aes(x = factor(release_year), y = score, fill = type)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = paste0(performer, \"\\n(\", type, \")\")),\n            vjust = -0.3, size = 3) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  labs(\n    title = \"Most Influential Performer by Sailor Shift Release Year\",\n    x = \"Release Year\",\n    y = \"Weighted Influence Score\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 0, vjust = 0.5),\n    panel.grid.major.x = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n# Part B: Who has Sailor Shift collaborated with and directly or indirectly influenced?\n\nTo answer this question, we first identified all artists who collaborated with Sailor Shift, and then checked whether any of these collaborators were later influenced by her music either directly (1 hop) or indirectly (2 hops).\n\nNext, we extracted all `PerformerOf` relationships involving `Person-type` nodes, then grouped artists by song. For each song performed by Sailor Shift, we generated artist pairs to determine collaborators. This yielded a list of artists who co-performed songs with her.\n\n## B1. Create a clean collaboration data table for all artists who collaborated\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Step 1: Get all PerformerOf edges with Person nodes only\nperformer_edges <- edges_tbl %>%\n  filter(`Edge Type` == \"PerformerOf\") %>%\n  inner_join(nodes_tbl %>% filter(`Node Type` == \"Person\") %>% select(id), \n             by = c(\"source\" = \"id\")) %>%\n  select(artist_id = source, song_id = target)\n\n# Step 2: For each song with >1 artist, create artist pairs (collaborators)\ncollaborations <- performer_edges %>%\n  group_by(song_id) %>%\n  filter(n() > 1) %>%\n  summarise(pairs = list(as.data.frame(t(combn(artist_id, 2)))), .groups = \"drop\") %>%\n  unnest(pairs) %>%\n  rename(from = V1, to = V2) %>%\n  distinct()\n\ncollaborations_named <- collaborations %>%\n  left_join(nodes_tbl %>% select(id, from_name = name), by = c(\"from\" = \"id\")) %>%\n  left_join(nodes_tbl %>% select(id, to_name = name),   by = c(\"to\" = \"id\"))\n\nprint(collaborations_named)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 21,217 × 5\n   song_id  from    to from_name        to_name         \n     <int> <int> <int> <chr>            <chr>           \n 1       0     1     2 Carlos Duffy     Min Qin         \n 2       0     1     3 Carlos Duffy     Xiuying Xie     \n 3       0     2     3 Min Qin          Xiuying Xie     \n 4       5     7     8 Xiulan Zeng      David Franklin  \n 5      15    16    17 Timothy Shea     Philippine Colin\n 6      15    16    19 Timothy Shea     Jordan Mullins  \n 7      15    16    20 Timothy Shea     Xiuying Meng    \n 8      15    17    19 Philippine Colin Jordan Mullins  \n 9      15    17    20 Philippine Colin Xiuying Meng    \n10      15    19    20 Jordan Mullins   Xiuying Meng    \n# ℹ 21,207 more rows\n```\n\n\n:::\n:::\n\n\n\n### Print all artists Sailor has collaborated with\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Filter rows where Sailor Shift is involved\nsailor_collaborations_named <- collaborations_named %>%\n  filter(from_name == \"Sailor Shift\" | to_name == \"Sailor Shift\")\n\n# Step 2: Create a unified collaborator column (the \"other\" artist)\nsailor_collaborations_named <- sailor_collaborations_named %>%\n  mutate(\n    collaborator_name = ifelse(from_name == \"Sailor Shift\", to_name, from_name)\n  ) %>%\n  select(song_id, collaborator_name, from_name, to_name)\n\nprint(sailor_collaborations_named)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  song_id collaborator_name from_name    to_name          \n    <int> <chr>             <chr>        <chr>            \n1   17350 Beatrice Albright Sailor Shift Beatrice Albright\n2   17356 Daniel O'Connell  Sailor Shift Daniel O'Connell \n3   17410 Kai Reynolds      Kai Reynolds Sailor Shift     \n```\n\n\n:::\n:::\n\n\n\n## B2. Tracing Her Influence\n\nWe defined Sailor’s influence using five edge types: `CoverOf`, `InStyleOf`, `DirectlySamples`, `InterpolatesFrom`, and `LyricalReferenceTo`. From songs performed by Sailor Shift, we traced:\n\n-   Direct influence (1 hop): Songs that were influenced by her songs\n\n-   Indirect influence (2 hops): Songs influenced by those direct target songs\n\nWe then looked for performers of those influenced songs, filtering by `Person`, `MusicGroup`, or `RecordLabel` node types.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\n# Step 1: Get Sailor Shift's ID\nsailor_id <- nodes_tbl %>%\n  filter(name == \"Sailor Shift\") %>%\n  pull(id)\n\n# Step 2: Get all songs she performed\nsailor_songs <- edges_tbl %>%\n  filter(`Edge Type` == \"PerformerOf\", source == sailor_id) %>%\n  pull(target)\n\n# Step 3: Define influence edge types\ninfluence_types <- c(\"CoverOf\", \"InStyleOf\", \"DirectlySamples\", \"InterpolatesFrom\", \"LyricalReferenceTo\")\n\n# Step 4: Find directly influenced songs (1 hop)\ndirect_targets <- edges_tbl %>%\n  filter(`Edge Type` %in% influence_types, source %in% sailor_songs) %>%\n  pull(target)\n\n# Step 5: Find indirectly influenced songs (2 hops)\nindirect_targets <- edges_tbl %>%\n  filter(`Edge Type` %in% influence_types, source %in% direct_targets) %>%\n  pull(target)\n\n# Step 6: Get artists who performed directly influenced songs\ndirect_influenced_ids <- edges_tbl %>%\n  filter(`Edge Type` == \"PerformerOf\", target %in% direct_targets) %>%\n  pull(source) %>%\n  unique()\n\n# Step 7: Get artists who performed indirectly influenced songs\nindirect_influenced_ids <- edges_tbl %>%\n  filter(`Edge Type` == \"PerformerOf\", target %in% indirect_targets) %>%\n  pull(source) %>%\n  unique()\n\n# Step 8: Create influence_tbl\nsailor_influence_tbl <- bind_rows(\n  tibble(id = direct_influenced_ids, influence = \"direct\"),\n  tibble(id = indirect_influenced_ids, influence = \"indirect\")\n) %>%\n  distinct(id, .keep_all = TRUE) %>%\n  inner_join(nodes_tbl, by = \"id\") %>%\n  filter(`Node Type` %in% c(\"Person\", \"MusicGroup\", \"RecordLabel\")) %>%\n  select(id, name, type = `Node Type`, influence)\n```\n:::\n\n\n\n### Sailor Shift's Musical Influence Network (1-hop & 2-hop)\n\nCollaborators of Sailor Shift who were directly or indirectly influenced by her music.\n\n\n\n### Plot Network Graph\n\n\n  \n\n### Result\n\nFinally, we compared the two sets:\n\n-   Artists who collaborated with Sailor\n\n-   Artists who performed songs that were influenced by her work\n\nThis intersection revealed the collaborators she also influenced. The result showed that while Sailor collaborated with several artists, only a subset of them were later musically influenced by her. These collaborators were flagged with the type of influence (direct or indirect) in the final summary table.\n\n### Key Insight:\n\nSailor Shift didn’t just work with other artists which she also influenced some of them through her music. While she had several collaborators, only a few were directly or indirectly shaped by her style, showing that her impact went beyond teamwork and helped inspire others.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Extract the 3 collaborator names from filtered table\ncollaborators <- sailor_collaborations_named %>%\n  pull(collaborator_name) %>%\n  unique()\n\n# Step 2: Get their IDs from nodes_tbl\ncollaborator_ids <- nodes_tbl %>%\n  filter(name %in% collaborators) %>%\n  select(id, name)\n\n# Step 3: Check which appear in sailor_influence_tbl\ncollab_influence_check <- collaborator_ids %>%\n  left_join(sailor_influence_tbl, by = c(\"id\", \"name\")) %>%\n  mutate(influenced = ifelse(is.na(influence), \"No\", paste(\"Yes -\", influence))) %>%\n  select(id, name, influenced)\n\nprint(collab_influence_check)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n     id name              influenced\n  <int> <chr>             <chr>     \n1 17226 Kai Reynolds      No        \n2 17349 Beatrice Albright No        \n3 17355 Daniel O'Connell  No        \n```\n\n\n:::\n:::\n\n\n\n# PART C: How has she influenced collaborators of the broader Oceanus Folk community?\n\nTo explore Sailor Shift’s influence within the Oceanus Folk community, we took a three-step approach:\n\n## C1. Defining the Oceanus Folk Community\n\nWe identified the Oceanus Folk community as all individuals who contributed to songs tagged with the genre \"Oceanus Folk\"—including performers, composers, lyricists, and producers. Additionally, we manually added key members of the Ivy Echoes group—Maya Jensen, Lila Hartman, Jade Thompson, and Sophie Ramirez—who co-founded Oceanus Folk alongside Sailor Shift.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(stringr)\n\n# Step 1: Identify all songs tagged as \"Oceanus Folk\"\noceanus_songs <- nodes_tbl %>%\n  filter(str_detect(genre, \"Oceanus Folk\")) %>%\n  pull(id)\n\n# Step 2: Define creative roles\ncreative_roles <- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\n# Step 3: Get contributors to Oceanus Folk songs via creative roles\noceanus_contributor_ids <- edges_tbl %>%\n  filter(`Edge Type` %in% creative_roles, target %in% oceanus_songs) %>%\n  pull(source) %>%\n  unique()\n\n# Step 4: Manually define Ivy Echoes members (since group node is missing)\nivy_echoes_members <- nodes_tbl %>%\n  filter(name %in% c(\"Maya Jensen\", \"Lila Hartman\", \"Jade Thompson\", \"Sophie Ramirez\")) %>%\n  pull(id)\n\n# Step 5: Combine all unique contributors\noceanus_community_ids <- unique(c(\n  oceanus_contributor_ids,\n  ivy_echoes_members\n))\n\n# Step 6: Filter to only relevant node types\noceanus_community <- nodes_tbl %>%\n  filter(id %in% oceanus_community_ids,\n         `Node Type` %in% c(\"Person\", \"MusicGroup\", \"RecordLabel\")) %>%\n  select(id, name, type = `Node Type`)\n\n# View the final Oceanus Folk community\nprint(oceanus_community)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 732 × 3\n      id name             type  \n   <int> <chr>            <chr> \n 1     1 Carlos Duffy     Person\n 2     2 Min Qin          Person\n 3     3 Xiuying Xie      Person\n 4   267 Walter White     Person\n 5   274 Li Xie           Person\n 6   372 Tao Cui          Person\n 7   554 William Lynch    Person\n 8   555 Justin Morse     Person\n 9   556 Eduardo Gonzalez Person\n10   721 Ryan Devan       Person\n# ℹ 722 more rows\n```\n\n\n:::\n:::\n\n\n\n## C2. Mapping Collaborators of the Oceanus Folk Community\n\nThis step identifies artists, groups, or labels who collaborated with members of the Oceanus Folk community by co-creating the same songs. Collaboration is defined broadly to include performers, composers, lyricists, and producers. Any artist who shares a creative edge to the same song as an Oceanus Folk contributor is considered a collaborator of the Oceanus Folk community.\n\nA focused and full-scale network graph was constructed to visualize this creative ecosystem, highlighting top contributors and their closest collaborators.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Get all songs the Oceanus Folk community worked on\noceanus_songs_all_roles <- edges_tbl %>%\n  filter(`Edge Type` %in% creative_roles,\n         source %in% oceanus_community$id) %>%\n  pull(target) %>%\n  unique()\n\n# Step 2: Find all contributors to those songs (excluding Oceanus community themselves)\ncollaborator_ids <- edges_tbl %>%\n  filter(`Edge Type` %in% creative_roles,\n         target %in% oceanus_songs_all_roles,\n         !source %in% oceanus_community$id) %>%\n  pull(source) %>%\n  unique()\n\n# Step 3: Get node info for these collaborators\noceanus_collaborators <- nodes_tbl %>%\n  filter(id %in% collaborator_ids,\n         `Node Type` %in% c(\"Person\", \"MusicGroup\", \"RecordLabel\")) %>%\n  select(id, name, type = `Node Type`)\n\n# View result\nprint(oceanus_collaborators)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 913 × 3\n      id name         type  \n   <int> <chr>        <chr> \n 1    20 Xiuying Meng Person\n 2    52 Na Guo       Person\n 3   151 Gang Zhao    Person\n 4   163 Regina Hesse Person\n 5   172 Lei Liao     Person\n 6   197 Xia Ren      Person\n 7   201 Fang Zou     Person\n 8   202 Guiying Pan  Person\n 9   265 Wei Zhang    Person\n10   266 Ping Meng    Person\n# ℹ 903 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## C3.  Tracing Sailor Shift’s Influence Through the Network\n\nIn this step, we explore how Sailor Shift’s music has influenced the broader network of artists who have collaborated with the Oceanus Folk community. Specifically, we aim to identify which of these collaborators were directly or indirectly musically influenced by Sailor Shift through her songs.\n\nTo do this, we first constructed a subgraph of the musical influence network, focusing only on influence-type relationships such as `CoverOf`, `InStyleOf`, `DirectlySamples`, `InterpolatesFrom`, and `LyricalReferenceTo`. Starting from Sailor Shift’s original songs, we traversed these influence links to identify all downstream songs and artists that have been impacted either directly or through a chain of influence (multi-hop).\n\nWe then cross-referenced the results with the previously identified collaborators of the Oceanus Folk community, defined as artists who have shared performance, lyrical, compositional, or production credits on songs with Oceanus Folk artists. By intersecting these two groups, we determined which collaborators were musically influenced by Sailor’s work.\n\nFor each influenced collaborator, we recorded:\n\n-   The name of the collaborator\n\n-   The song(s) of theirs that were influenced\n\n-   The specific Sailor Shift song(s) that served as the origin of influence\n\n-   The number of influence steps (or hops) between Sailor’s song and the collaborator’s song\n\nThis approach allows us to trace the spread of Sailor Shift’s musical impact beyond her direct connections and into the wider music ecosystem surrounding the Oceanus Folk genre.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(igraph)\nlibrary(tidyr)\n\n# Step 1: Prepare nodes \nnodes_tbl <- nodes_tbl %>%\n  mutate(id = as.character(id))  # IDs must be character for joining\n\nnodes_indexed <- nodes_tbl %>%\n  mutate(index = row_number())  # this will be used for igraph\n\n# Step 2: Create mapping table\nid_map <- nodes_indexed %>%\n  select(id, index)\n\n# Step 3\n# Start from a clean edges_tbl\nedges_base <- edges_tbl %>%\n  filter(`Edge Type` %in% influence_types) %>%\n  mutate(source = as.character(source), target = as.character(target))\n\n# First: Join for 'from'\nedges_with_from <- edges_base %>%\n  left_join(id_map, by = c(\"source\" = \"id\")) %>%\n  rename(from_index = index)\n\n# Second: Join for 'to'\nedges_with_to <- edges_with_from %>%\n  left_join(id_map, by = c(\"target\" = \"id\")) %>%\n  rename(to_index = index)\n\n# Final cleaned influence_edges\ninfluence_edges <- edges_with_to %>%\n  filter(!is.na(from_index) & !is.na(to_index)) %>%\n  select(from = from_index, to = to_index, `Edge Type`)\n\n# Step 4: Build igraph using numeric index\ng <- graph_from_data_frame(\n  d = influence_edges,\n  vertices = nodes_indexed %>% select(index),  # use only index column as unique node IDs\n  directed = TRUE\n)\n\n# Step 5\nsailor_id <- nodes_tbl %>%\n  filter(name == \"Sailor Shift\") %>%\n  pull(id)\n\nsailor_song_ids <- edges_tbl %>%\n  filter(`Edge Type` == \"PerformerOf\", source == sailor_id) %>%\n  pull(target) %>%\n  as.character()\n\nsailor_song_indices <- id_map %>%\n  filter(id %in% sailor_song_ids) %>%\n  pull(index)\n\n# Step 6\ndist_matrix <- distances(g, v = sailor_song_indices, mode = \"out\")\n\n# Step 7\ndist_df <- as.data.frame(dist_matrix) %>%\n  rownames_to_column(\"sailor_song_index\") %>%\n  pivot_longer(-sailor_song_index, names_to = \"influenced_index\", values_to = \"dist_from_sailor\") %>%\n  filter(is.finite(dist_from_sailor)) %>%\n  mutate(across(everything(), as.integer))\n\n# Step 8\n# Map indices back to node IDs\ndist_df <- dist_df %>%\n  left_join(nodes_indexed %>% select(index, id), by = c(\"sailor_song_index\" = \"index\")) %>%\n  rename(sailor_song_id = id) %>%\n  left_join(nodes_indexed %>% select(index, id), by = c(\"influenced_index\" = \"index\")) %>%\n  rename(influenced_song_id = id)\n\n# Get song names\nsong_names <- nodes_tbl %>%\n  filter(`Node Type` == \"Song\") %>%\n  select(id, song_name = name)\n\ndist_named <- dist_df %>%\n  left_join(song_names, by = c(\"sailor_song_id\" = \"id\")) %>%\n  rename(sailor_song = song_name) %>%\n  left_join(song_names, by = c(\"influenced_song_id\" = \"id\")) %>%\n  rename(influenced_song = song_name)\n\n# Step 9\ncreative_roles <- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\ninfluenced_edges <- edges_tbl %>%\n  filter(`Edge Type` %in% creative_roles,\n         target %in% dist_named$influenced_song_id,\n         source %in% oceanus_collaborators$id) %>%\n  mutate(across(c(source, target), as.character))\n\nfinal_result <- influenced_edges %>%\n  left_join(nodes_tbl %>% select(id, collaborator_name = name), by = c(\"source\" = \"id\")) %>%\n  left_join(dist_named, by = c(\"target\" = \"influenced_song_id\"), relationship = \"many-to-many\") %>%\n  select(collaborator_name, influenced_song, sailor_song, dist_from_sailor) %>%\n  arrange(dist_from_sailor, collaborator_name)\n\n\nfinal_result <- final_result %>% filter(!is.na(sailor_song))\n```\n:::\n\n\n\n## C4. Results\n\nWe identified a subset of Oceanus Folk collaborators whose work was musically influenced by Sailor Shift, either directly or through multi-hop influence paths. Each influence link was traced from one of Sailor's original songs through the musical knowledge graph, focusing on `CoverOf`, `InterpolatesFrom`, `InStyleOf`, and related relationships.\n\nWe produced a summary table and influence network diagram showing:\n\n- The collaborator name\n\n- Their influenced song\n\n- The original Sailor Shift song\n\n- The number of hops from Sailor’s song to theirs\n\nSongs like “Saltwater Hymn” and “Moon Over the Tide” played a key role in spreading Sailor Shift’s influence to other artists, even through several layers of connection.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(final_result, 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16 × 4\n   collaborator_name  influenced_song               sailor_song dist_from_sailor\n   <chr>              <chr>                         <chr>                  <int>\n 1 Tao Gao            Silent Steps in the Forest's… Moon Over …                1\n 2 Tao Gao            Silent Steps in the Forest's… Moon Over …                1\n 3 Guiying Lu         Ripples and Whispers          Saltwater …                2\n 4 Guiying Lu         Ripples and Whispers          Saltwater …                2\n 5 Juan Gao           Ripples and Whispers          Saltwater …                2\n 6 Min Fu             Whispers of Finality          Moon Over …                2\n 7 Min Tao            Ripples and Whispers          Saltwater …                2\n 8 Min Tao            Ripples and Whispers          Saltwater …                2\n 9 David Schultz      Sunlight Whispers             Saltwater …                3\n10 Heather Wood       Sunlight Whispers             Saltwater …                3\n11 Jacqueline Dickson Sunlight Whispers             Saltwater …                3\n12 Jonathan Young     Sunlight Whispers             Saltwater …                3\n13 Jun Guo            Sunlight Whispers             Saltwater …                3\n14 Jun Guo            Sunlight Whispers             Saltwater …                3\n15 Laura Jefferson    Sunlight Whispers             Saltwater …                3\n16 Min Fu             Whispers of Finality          Saltwater …                4\n```\n\n\n:::\n:::\n\n\n\n### Key Insight:\n\nSailor Shift’s artistic influence extended well beyond her direct circle of collaborators. Her music indirectly shaped the work of several artists in the Oceanus Folk scene—highlighting her central role as both a founder and a source of inspiration for the genre.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(ggforce)\n\n# Step 1: Prepare nodes\nnode_table <- final_result %>%\n  pivot_longer(cols = c(sailor_song, influenced_song, collaborator_name),\n               names_to = \"type\", values_to = \"label\") %>%\n  distinct(label, type) %>%\n  mutate(id = row_number())\n\n# Step 2: Map each node label to ID\nlabel_to_id <- node_table %>% select(label, id)\n\n# Step 3: Build edges\nedges_song_to_song <- final_result %>%\n  select(from = sailor_song, to = influenced_song) %>%\n  left_join(label_to_id, by = c(\"from\" = \"label\")) %>%\n  rename(from_id = id) %>%\n  left_join(label_to_id, by = c(\"to\" = \"label\")) %>%\n  rename(to_id = id) %>%\n  select(from = from_id, to = to_id) %>%\n  mutate(type = \"influence\")\n\nedges_song_to_person <- final_result %>%\n  select(from = influenced_song, to = collaborator_name) %>%\n  left_join(label_to_id, by = c(\"from\" = \"label\")) %>%\n  rename(from_id = id) %>%\n  left_join(label_to_id, by = c(\"to\" = \"label\")) %>%\n  rename(to_id = id) %>%\n  select(from = from_id, to = to_id) %>%\n  mutate(type = \"collaboration\")\n\n# Add dist_from_sailor to influence edges\nedges_song_to_song <- final_result %>%\n  select(from = sailor_song, to = influenced_song, dist_from_sailor) %>%\n  left_join(label_to_id, by = c(\"from\" = \"label\")) %>%\n  rename(from_id = id) %>%\n  left_join(label_to_id, by = c(\"to\" = \"label\")) %>%\n  rename(to_id = id) %>%\n  select(from = from_id, to = to_id, dist_from_sailor) %>%\n  mutate(type = \"influence\")\n\n# Combine all edges\nedges_all <- bind_rows(edges_song_to_song, edges_song_to_person)\n\n# Step 4: Build graph\ng <- tbl_graph(nodes = node_table, edges = edges_all, directed = TRUE)\n\n\nlayout <- create_layout(g, layout = \"fr\")\n\n# Pull node positions by index\nnodes_pos <- layout %>%\n  select(.ggraph.index, x, y)\n\n# Join coordinates to edge table\nedges_label_data <- edges_all %>%\n  filter(type == \"influence\" & !is.na(dist_from_sailor)) %>%\n  left_join(nodes_pos, by = c(\"from\" = \".ggraph.index\")) %>%\n  rename(x_from = x, y_from = y) %>%\n  left_join(nodes_pos, by = c(\"to\" = \".ggraph.index\")) %>%\n  rename(x_to = x, y_to = y) %>%\n  mutate(\n    x = (x_from + x_to) / 2,\n    y = (y_from + y_to) / 2,\n    label = paste0(dist_from_sailor, \" hop\", ifelse(dist_from_sailor > 1, \"s\", \"\"))\n  )\n```\n:::\n\n\n\n### Plot Network Graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(layout) +\n  geom_edge_link(aes(color = type),\n                 arrow = arrow(length = unit(3, \"mm\")),\n                 end_cap = circle(2, 'mm')) +\n\n  geom_text(data = edges_label_data,\n            aes(x = x, y = y, label = label),\n            size = 3, fontface = \"italic\", color = \"black\") +\n\n  geom_node_point(aes(color = type), size = 4) +\n  geom_node_text(aes(label = label), repel = TRUE, size = 3) +\n\n  scale_edge_color_manual(values = c(\"influence\" = \"blue\", \"collaboration\" = \"darkgreen\")) +\n  scale_color_manual(values = c(\n    sailor_song = \"lightblue\",\n    influenced_song = \"gold\",\n    collaborator_name = \"lightgreen\"\n  )) +\n\n  theme_void() +\n  labs(\n    title = \"Sailor Shift's Influence on Oceanus Folk Collaborators\",\n    subtitle = \"Influence distances labeled along edges\"\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}