[
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph, packcircles, stringr, igraph, visNetwork, treemap)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a1.-convert-validate-dates",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a1.-convert-validate-dates",
    "title": "Take-Home Exercise 2",
    "section": "A1. Convert & Validate Dates",
    "text": "A1. Convert & Validate Dates\n\n# Check raw release_date format\nnodes_tbl %&gt;%\n  select(name, release_date) %&gt;%\n  filter(!is.na(release_date)) %&gt;%\n  distinct(release_date) %&gt;%\n  arrange(release_date)\n\n# A tibble: 64 × 1\n   release_date\n   &lt;chr&gt;       \n 1 1975        \n 2 1977        \n 3 1979        \n 4 1980        \n 5 1981        \n 6 1982        \n 7 1983        \n 8 1984        \n 9 1985        \n10 1986        \n# ℹ 54 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a2.-check-sailor-shifts-song-release-date-sorted-chronologically",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a2.-check-sailor-shifts-song-release-date-sorted-chronologically",
    "title": "Take-Home Exercise 2",
    "section": "A2. Check Sailor Shift’s song release date sorted chronologically",
    "text": "A2. Check Sailor Shift’s song release date sorted chronologically\n\n\nShow the code\n# 1. Find Sailor Shift's ID\nsailor_id &lt;- nodes_tbl %&gt;%\n  filter(name == \"Sailor Shift\") %&gt;%\n  pull(id)\n\n# 2. Get all songs she performed\nsailor_songs &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` == \"PerformerOf\", source == sailor_id) %&gt;%\n  pull(target)\n\n# 3. Retrieve and sort their release dates\nsailor_songs_tbl &lt;- nodes_tbl %&gt;%\n  filter(id %in% sailor_songs) %&gt;%\n  select(id, name, release_date) %&gt;%\n  mutate(release_year = as.numeric(release_date)) %&gt;%\n  arrange(release_year)\n\n# 4. Print result\nprint(sailor_songs_tbl)\n\n\n# A tibble: 26 × 4\n      id name                  release_date release_year\n   &lt;int&gt; &lt;chr&gt;                 &lt;chr&gt;               &lt;dbl&gt;\n 1 17272 Tidal Pop Waves       2028                 2028\n 2 17279 High Tide Heartbeat   2028                 2028\n 3 17280 Electric Eel Love     2028                 2028\n 4 17281 Sun-Drenched Daydream 2028                 2028\n 5 17282 Chord of the Deep     2028                 2028\n 6 17273 Salty Dreams          2030                 2030\n 7 17283 Heart of the Habitat  2030                 2030\n 8 17284 Reef Rhythm           2030                 2030\n 9 17285 Driftwood Lullaby     2030                 2030\n10 17410 Seashell Serenade     2030                 2030\n# ℹ 16 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a3.-influence-types",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a3.-influence-types",
    "title": "Take-Home Exercise 2",
    "section": "A3. Influence Types",
    "text": "A3. Influence Types\n\ninfluence_types &lt;- c(\n  \"InStyleOf\",\n  \"CoverOf\",\n  \"DirectlySamples\",\n  \"InterpolatesFrom\",\n  \"LyricalReferenceTo\"\n)\n\n\nBuild influence data table\n\ninfluences &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` %in% influence_types)\n\n\n\nPlot influence\n\n\nShow the code\ninfluences %&gt;%\n  count(`Edge Type`) %&gt;%\n  ggplot(aes(x = reorder(`Edge Type`, n), y = n, fill = `Edge Type`)) +\n  geom_col(show.legend = FALSE) +\n  coord_flip() +\n  labs(title = \"How Sailor Shift Was Influenced\",\n       x = \"Type of Influence\", y = \"Count\") +\n  theme_minimal()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a4.-find-the-song-released-dates",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a4.-find-the-song-released-dates",
    "title": "Take-Home Exercise 2",
    "section": "A4. Find the song released dates",
    "text": "A4. Find the song released dates\n\nlibrary(dplyr)\n\n# 1. Define the years in which she released music\nyears &lt;- sort(unique(sailor_songs_tbl$release_year))\n\nyears\n\n[1] 2028 2030 2031 2032 2034 2036 2038 2040\n\n\n\nDefine influence_types\n\n\nShow the code\nlibrary(dplyr)\n\nyearly_top_influencers &lt;- \n  edges_tbl %&gt;%\n  # 1. keep only influence edges\n  filter(`Edge Type` %in% influence_types) %&gt;%\n  # 2. attach Sailor Shift song years (join on source → id)\n  inner_join(\n    sailor_songs_tbl,\n    by = c(\"source\" = \"id\")\n  ) %&gt;%\n  # 3. bring in influencer name + node type\n  left_join(\n    nodes_tbl %&gt;% select(id, influencer = name, type = `Node Type`),\n    by = c(\"target\" = \"id\")\n  ) %&gt;%\n  # 4. tally per year + influencer\n  count(release_year, influencer, type, name = \"count\") %&gt;%\n  # 5. pick the single top influencer each year\n  group_by(release_year) %&gt;%\n  slice_max(count, n = 1, with_ties = FALSE) %&gt;%\n  ungroup() %&gt;%\n  arrange(release_year)\n\nprint(yearly_top_influencers)\n\n\n# A tibble: 7 × 4\n  release_year influencer                 type  count\n         &lt;dbl&gt; &lt;chr&gt;                      &lt;chr&gt; &lt;int&gt;\n1         2028 Addicted to Your Heartache Album     1\n2         2030 Echoes of Forgotten Light  Song      1\n3         2031 Dreamscape of Judgment     Song      1\n4         2032 Parallel Memories          Song      1\n5         2034 Divergent Memories         Song      1\n6         2036 Coastal Whispers of Biscay Song      1\n7         2038 Altitude of Mistakes       Song      1\n\n\n\n\nBuild perf_map\n\nperf_map &lt;- edges_tbl %&gt;% \n  filter(`Edge Type` == \"PerformerOf\") %&gt;% \n  select(influencer_song = target, \n         performer_id     = source)\n\n\n\nBuild yearly_top_influencers_artists\n\n\nShow the code\nyearly_top_influencers_artists &lt;-\n  edges_tbl %&gt;%\n  filter(`Edge Type` %in% influence_types) %&gt;%\n  \n  # attach Sailor Shift’s song years\n  inner_join(sailor_songs_tbl, by = c(\"source\" = \"id\")) %&gt;%\n  \n  # attach the song→performer mapping\n  inner_join(perf_map, by = c(\"target\" = \"influencer_song\")) %&gt;%\n  \n  # get the performer’s name & node type\n  left_join(\n    nodes_tbl %&gt;% select(id, influencer = name, type = `Node Type`),\n    by = c(\"performer_id\" = \"id\")\n  ) %&gt;%\n  \n  # only keep real performers (Person / Music Group / Record Label)\n  filter(type %in% c(\"Person\", \"Music Group\", \"Record Label\")) %&gt;%\n  \n  # count per year + performer\n  count(release_year, influencer, type, name = \"count\") %&gt;%\n  \n  # pick the top performer each year\n  group_by(release_year) %&gt;%\n  slice_max(count, n = 1, with_ties = FALSE) %&gt;%\n  ungroup() %&gt;%\n  arrange(release_year)\n\nprint(yearly_top_influencers_artists)\n\n\n# A tibble: 7 × 4\n  release_year influencer       type   count\n         &lt;dbl&gt; &lt;chr&gt;            &lt;chr&gt;  &lt;int&gt;\n1         2028 Jeremiah Love    Person     1\n2         2030 Gang Shao        Person     1\n3         2031 Sandra Burke     Person     1\n4         2032 Guiying Ren      Person     1\n5         2034 Joshua Taylor    Person     1\n6         2036 Daniel Mccormick Person     1\n7         2038 Amico Luciani    Person     1\n\n\nTo compare influence levels across different types (e.g., lyrical vs. stylistic), we computed normalized weights: rarer influence types were assigned higher scores to balance their impact in the analysis. For each year in which Sailor released music, we calculated a weighted influence score for every performer that influenced her that year."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a5.-build-weighted-counts",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a5.-build-weighted-counts",
    "title": "Take-Home Exercise 2",
    "section": "A5. Build weighted counts",
    "text": "A5. Build weighted counts\n\n# 1. Count how many times each Edge Type occurs\nbase_counts &lt;- influences %&gt;%\n  count(`Edge Type`, name = \"n\")\n\n# 2. Examine\nprint(base_counts)\n\n# A tibble: 5 × 2\n  `Edge Type`            n\n  &lt;chr&gt;              &lt;int&gt;\n1 CoverOf             1429\n2 DirectlySamples      619\n3 InStyleOf           2289\n4 InterpolatesFrom    1574\n5 LyricalReferenceTo  1496\n\n\n\nAuto_weights\n\n# 3. Compute max frequency\nmax_n &lt;- max(base_counts$n)\n\n# 4. Build the named weight vector\nauto_weights &lt;- base_counts %&gt;%\n  mutate(weight = max_n / n) %&gt;%\n  select(`Edge Type`, weight) %&gt;%\n  deframe()\n\nprint(auto_weights)\n\n           CoverOf    DirectlySamples          InStyleOf   InterpolatesFrom \n          1.601819           3.697900           1.000000           1.454257 \nLyricalReferenceTo \n          1.530080 \n\n\n\n\nBuild weights → weighted_top_by_year_auto\n\n\nShow the code\nweighted_top_by_year_auto &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` %in% influence_types) %&gt;%\n  inner_join(sailor_songs_tbl, by = c(\"source\" = \"id\")) %&gt;%\n  inner_join(perf_map,         by = c(\"target\" = \"influencer_song\")) %&gt;%\n  left_join(\n    nodes_tbl %&gt;% select(id, performer = name, type = `Node Type`),\n    by = c(\"performer_id\" = \"id\")\n  ) %&gt;%\n  filter(type %in% c(\"Person\", \"Music Group\", \"Record Label\")) %&gt;%\n  mutate(weight = recode(`Edge Type`, !!!auto_weights)) %&gt;%\n  group_by(release_year, performer, type) %&gt;%\n  summarize(score = sum(weight), .groups = \"drop\") %&gt;%\n  group_by(release_year) %&gt;%\n  slice_max(score, n = 1, with_ties = FALSE) %&gt;%\n  ungroup() %&gt;%\n  arrange(release_year)\n\nprint(weighted_top_by_year_auto)\n\n\n# A tibble: 7 × 4\n  release_year performer         type   score\n         &lt;dbl&gt; &lt;chr&gt;             &lt;chr&gt;  &lt;dbl&gt;\n1         2028 Joanna Avery      Person  1.60\n2         2030 Samantha Bullock  Person  1.60\n3         2031 Sandra Burke      Person  1.60\n4         2032 Guiying Ren       Person  1   \n5         2034 Simone Säuberlich Person  1.60\n6         2036 James Medina      Person  1.45\n7         2038 Amico Luciani     Person  3.70"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a6.-most-influential-performer-by-sailor-shift-release-year",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#a6.-most-influential-performer-by-sailor-shift-release-year",
    "title": "Take-Home Exercise 2",
    "section": "A6. Most Influential Performer by Sailor Shift Release Year",
    "text": "A6. Most Influential Performer by Sailor Shift Release Year\nThe resulting chart below shows the top influencer by year, accounting for both the frequency and type of influence. Each bar represents a release year in Sailor’s career, annotated with the name of her top influencer (person, group, or label) and the cumulative influence score.\nThis approach reveals both consistent sources of inspiration and shifts in influence throughout her discography, offering insight into how her sound may have been shaped by key collaborators or predecessors.\n\n\nShow the code\nlibrary(ggplot2)\n\nggplot(weighted_top_by_year_auto,\n       aes(x = factor(release_year), y = score, fill = type)) +\n  geom_col(show.legend = FALSE) +\n  geom_text(aes(label = paste0(performer, \"\\n(\", type, \")\")),\n            vjust = -0.3, size = 3) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.2))) +\n  labs(\n    title = \"Most Influential Performer by Sailor Shift Release Year\",\n    x = \"Release Year\",\n    y = \"Weighted Influence Score\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 0, vjust = 0.5),\n    panel.grid.major.x = element_blank()\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#b1.-create-a-clean-collaboration-data-table-for-all-artists-who-collaborated",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#b1.-create-a-clean-collaboration-data-table-for-all-artists-who-collaborated",
    "title": "Take-Home Exercise 2",
    "section": "B1. Create a clean collaboration data table for all artists who collaborated",
    "text": "B1. Create a clean collaboration data table for all artists who collaborated\n\n\nShow the code\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Step 1: Get all PerformerOf edges with Person nodes only\nperformer_edges &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` == \"PerformerOf\") %&gt;%\n  inner_join(nodes_tbl %&gt;% filter(`Node Type` == \"Person\") %&gt;% select(id), \n             by = c(\"source\" = \"id\")) %&gt;%\n  select(artist_id = source, song_id = target)\n\n# Step 2: For each song with &gt;1 artist, create artist pairs (collaborators)\ncollaborations &lt;- performer_edges %&gt;%\n  group_by(song_id) %&gt;%\n  filter(n() &gt; 1) %&gt;%\n  summarise(pairs = list(as.data.frame(t(combn(artist_id, 2)))), .groups = \"drop\") %&gt;%\n  unnest(pairs) %&gt;%\n  rename(from = V1, to = V2) %&gt;%\n  distinct()\n\ncollaborations_named &lt;- collaborations %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, from_name = name), by = c(\"from\" = \"id\")) %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, to_name = name),   by = c(\"to\" = \"id\"))\n\nprint(collaborations_named)\n\n\n# A tibble: 21,217 × 5\n   song_id  from    to from_name        to_name         \n     &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;            &lt;chr&gt;           \n 1       0     1     2 Carlos Duffy     Min Qin         \n 2       0     1     3 Carlos Duffy     Xiuying Xie     \n 3       0     2     3 Min Qin          Xiuying Xie     \n 4       5     7     8 Xiulan Zeng      David Franklin  \n 5      15    16    17 Timothy Shea     Philippine Colin\n 6      15    16    19 Timothy Shea     Jordan Mullins  \n 7      15    16    20 Timothy Shea     Xiuying Meng    \n 8      15    17    19 Philippine Colin Jordan Mullins  \n 9      15    17    20 Philippine Colin Xiuying Meng    \n10      15    19    20 Jordan Mullins   Xiuying Meng    \n# ℹ 21,207 more rows\n\n\n\nPrint all artists Sailor has collaborated with\n\n\nShow the code\n# Step 1: Filter rows where Sailor Shift is involved\nsailor_collaborations_named &lt;- collaborations_named %&gt;%\n  filter(from_name == \"Sailor Shift\" | to_name == \"Sailor Shift\")\n\n# Step 2: Create a unified collaborator column (the \"other\" artist)\nsailor_collaborations_named &lt;- sailor_collaborations_named %&gt;%\n  mutate(\n    collaborator_name = ifelse(from_name == \"Sailor Shift\", to_name, from_name)\n  ) %&gt;%\n  select(song_id, collaborator_name, from_name, to_name)\n\nprint(sailor_collaborations_named)\n\n\n# A tibble: 3 × 4\n  song_id collaborator_name from_name    to_name          \n    &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;        &lt;chr&gt;            \n1   17350 Beatrice Albright Sailor Shift Beatrice Albright\n2   17356 Daniel O'Connell  Sailor Shift Daniel O'Connell \n3   17410 Kai Reynolds      Kai Reynolds Sailor Shift"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#b2.-tracing-her-influence",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#b2.-tracing-her-influence",
    "title": "Take-Home Exercise 2",
    "section": "B2. Tracing Her Influence",
    "text": "B2. Tracing Her Influence\nWe defined Sailor’s influence using five edge types: CoverOf, InStyleOf, DirectlySamples, InterpolatesFrom, and LyricalReferenceTo. From songs performed by Sailor Shift, we traced:\n\nDirect influence (1 hop): Songs that were influenced by her songs\nIndirect influence (2 hops): Songs influenced by those direct target songs\n\nWe then looked for performers of those influenced songs, filtering by Person, MusicGroup, or RecordLabel node types.\n\n\nShow the code\nlibrary(dplyr)\n\n# 1. Sailor Shift’s ID and performed songs\nsailor_id    &lt;- nodes_tbl %&gt;% \n  filter(name == \"Sailor Shift\") %&gt;% \n  pull(id)\n\nsailor_songs &lt;- edges_tbl %&gt;% \n  filter(`Edge Type` == \"PerformerOf\", source == sailor_id) %&gt;% \n  pull(target) %&gt;% \n  unique()\n\n# 2. Influence edge types\ninfluence_types &lt;- c(\n  \"CoverOf\", \"InStyleOf\", \"DirectlySamples\",\n  \"InterpolatesFrom\", \"LyricalReferenceTo\"\n)\n\n# 3. Direct (1-hop) and indirect (2-hop) influenced song IDs\ndirect_targets   &lt;- edges_tbl %&gt;% \n  filter(`Edge Type` %in% influence_types, source %in% sailor_songs) %&gt;% \n  pull(target) %&gt;% \n  unique()\n\nindirect_targets &lt;- edges_tbl %&gt;% \n  filter(`Edge Type` %in% influence_types, source %in% direct_targets) %&gt;% \n  pull(target) %&gt;% \n  setdiff(direct_targets) %&gt;%   # exclude any already in direct_targets\n  unique()\n\n# 4. Performer IDs for those influenced songs\ndirect_ids   &lt;- edges_tbl %&gt;% \n  filter(`Edge Type` == \"PerformerOf\", target %in% direct_targets) %&gt;% \n  pull(source) %&gt;% \n  unique()\n\nindirect_ids &lt;- edges_tbl %&gt;% \n  filter(`Edge Type` == \"PerformerOf\", target %in% indirect_targets) %&gt;% \n  pull(source) %&gt;% \n  unique()\n\n# 5. Assemble final table\nsailor_influence_tbl &lt;- bind_rows(\n  tibble(id = direct_ids,   influence = \"direct\"),\n  tibble(id = indirect_ids, influence = \"indirect\")\n) %&gt;%\n  arrange(id, influence) %&gt;%            # ensure direct takes precedence\n  distinct(id, .keep_all = TRUE) %&gt;%   # one row per artist\n  inner_join(nodes_tbl, by = \"id\") %&gt;% \n  filter(`Node Type` %in% c(\"Person\", \"MusicGroup\", \"RecordLabel\")) %&gt;% \n  select(id, name, type = `Node Type`, influence)\n\n# Inspect\nsailor_influence_tbl\n\n\n# A tibble: 118 × 4\n      id name            type   influence\n   &lt;int&gt; &lt;chr&gt;           &lt;chr&gt;  &lt;chr&gt;    \n 1    76 Ming Ren        Person direct   \n 2   334 Christopher Lee Person indirect \n 3   455 Yang Peng       Person direct   \n 4   457 Min Cao         Person direct   \n 5   551 Szymon Pyć      Person indirect \n 6   639 Ming Yan        Person indirect \n 7   878 Jing Kang       Person direct   \n 8   909 Min Tao         Person indirect \n 9   934 Jun Zhou        Person direct   \n10  1074 Jing Cui        Person indirect \n# ℹ 108 more rows\n\n\n\nPlot Network Graph\n\n\nShow the code\nlibrary(dplyr)\nlibrary(igraph)\nlibrary(visNetwork)\n\n# 1. Prepare node data \n\n# a) All song IDs: Sailor’s songs + direct + indirect\nall_songs &lt;- c(sailor_songs, direct_targets, indirect_targets) %&gt;% unique()\n\n# b) Song nodes\nsong_nodes &lt;- nodes_tbl %&gt;%\n  filter(id %in% all_songs) %&gt;%\n  transmute(\n    id      = as.character(id),\n    label   = name,\n    group   = \"Song\"\n  )\n\n# c) Artist nodes: Sailor Shift + those in sailor_influence_tbl\nartist_ids &lt;- c(sailor_id, sailor_influence_tbl$id)\nartist_nodes &lt;- nodes_tbl %&gt;%\n  filter(id %in% artist_ids) %&gt;%\n  transmute(\n    id      = as.character(id),\n    label   = name,\n    group   = if_else(id == as.character(sailor_id), \n                      \"Sailor Shift\", \n                      # use the type from sailor_influ\n                      sailor_influence_tbl$type[match(id, as.character(sailor_influence_tbl$id))])\n  )\n\n# d) Combine\nnodes_vis &lt;- bind_rows(song_nodes, artist_nodes) %&gt;%\n  distinct(id, .keep_all = TRUE)\n\n\n# 2. Prepare edge data \n\n# a) Influence edges (song → song)\nedge_inf &lt;- edges_tbl %&gt;%\n  filter(\n    `Edge Type` %in% influence_types,\n    source %in% all_songs,\n    target %in% all_songs\n  ) %&gt;%\n  transmute(\n    from = as.character(source),\n    to   = as.character(target)\n  )\n\n# b) Performer edges (artist → song)\nedge_perf &lt;- edges_tbl %&gt;%\n  filter(\n    `Edge Type` == \"PerformerOf\",\n    source %in% artist_ids,\n    target %in% all_songs\n  ) %&gt;%\n  transmute(\n    from = as.character(source),\n    to   = as.character(target)\n  )\n\n# c) Combine\nedges_vis &lt;- bind_rows(edge_inf, edge_perf) %&gt;%\n  distinct(from, to, .keep_all = TRUE)\n\n\n# 3. Plot with visNetwork\n\nvisNetwork(nodes_vis, edges_vis, width = \"100%\", height = \"600px\") %&gt;%\n  visNodes(\n    font   = list(size = 20),\n    shadow = TRUE\n  ) %&gt;%\n  visEdges(\n    smooth  = TRUE,\n    shadow  = FALSE,\n    arrows  = \"to\"\n  ) %&gt;%\n  visOptions(\n    highlightNearest  = TRUE,\n    nodesIdSelection  = TRUE\n  ) %&gt;%\n  visLegend(\n    useGroups = TRUE,\n    position  = \"right\"\n  ) %&gt;%\n  visLayout(randomSeed = 42)\n\n\n\n\n\n\n\n\nResult\nFinally, we compared the two sets:\n\nArtists who collaborated with Sailor\nArtists who performed songs that were influenced by her work\n\nThis intersection revealed the collaborators she also influenced. The result showed that while Sailor collaborated with several artists, only a subset of them were later musically influenced by her. These collaborators were flagged with the type of influence (direct or indirect) in the final summary table.\n\n\nKey Insight:\nSailor Shift didn’t just work with other artists which she also influenced some of them through her music. While she had several collaborators, only a few were directly or indirectly shaped by her style, showing that her impact went beyond teamwork and helped inspire others.\n\n\nShow the code\n# Step 1: Extract the 3 collaborator names from filtered table\ncollaborators &lt;- sailor_collaborations_named %&gt;%\n  pull(collaborator_name) %&gt;%\n  unique()\n\n# Step 2: Get their IDs from nodes_tbl\ncollaborator_ids &lt;- nodes_tbl %&gt;%\n  filter(name %in% collaborators) %&gt;%\n  select(id, name)\n\n# Step 3: Check which appear in sailor_influence_tbl\ncollab_influence_check &lt;- collaborator_ids %&gt;%\n  left_join(sailor_influence_tbl, by = c(\"id\", \"name\")) %&gt;%\n  mutate(influenced = ifelse(is.na(influence), \"No\", paste(\"Yes -\", influence))) %&gt;%\n  select(id, name, influenced)\n\nprint(collab_influence_check)\n\n\n# A tibble: 3 × 3\n     id name              influenced\n  &lt;int&gt; &lt;chr&gt;             &lt;chr&gt;     \n1 17226 Kai Reynolds      No        \n2 17349 Beatrice Albright No        \n3 17355 Daniel O'Connell  No"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#c1.-defining-the-oceanus-folk-community",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#c1.-defining-the-oceanus-folk-community",
    "title": "Take-Home Exercise 2",
    "section": "C1. Defining the Oceanus Folk Community",
    "text": "C1. Defining the Oceanus Folk Community\nWe identified the Oceanus Folk community as all individuals who contributed to songs tagged with the genre “Oceanus Folk”—including performers, composers, lyricists, and producers. Additionally, we manually added key members of the Ivy Echoes group—Maya Jensen, Lila Hartman, Jade Thompson, and Sophie Ramirez—who co-founded Oceanus Folk alongside Sailor Shift.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(stringr)\n\n# Step 1: Identify all songs tagged as \"Oceanus Folk\"\noceanus_songs &lt;- nodes_tbl %&gt;%\n  filter(str_detect(genre, \"Oceanus Folk\")) %&gt;%\n  pull(id)\n\n# Step 2: Define creative roles\ncreative_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\n# Step 3: Get contributors to Oceanus Folk songs via creative roles\noceanus_contributor_ids &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` %in% creative_roles, target %in% oceanus_songs) %&gt;%\n  pull(source) %&gt;%\n  unique()\n\n# Step 4: Manually define Ivy Echoes members (since group node is missing)\nivy_echoes_members &lt;- nodes_tbl %&gt;%\n  filter(name %in% c(\"Maya Jensen\", \"Lila Hartman\", \"Jade Thompson\", \"Sophie Ramirez\")) %&gt;%\n  pull(id)\n\n# Step 5: Combine all unique contributors\noceanus_community_ids &lt;- unique(c(\n  oceanus_contributor_ids,\n  ivy_echoes_members\n))\n\n# Step 6: Filter to only relevant node types\noceanus_community &lt;- nodes_tbl %&gt;%\n  filter(id %in% oceanus_community_ids,\n         `Node Type` %in% c(\"Person\", \"MusicGroup\", \"RecordLabel\")) %&gt;%\n  select(id, name, type = `Node Type`)\n\n# View the final Oceanus Folk community\nprint(oceanus_community)\n\n\n# A tibble: 732 × 3\n      id name             type  \n   &lt;int&gt; &lt;chr&gt;            &lt;chr&gt; \n 1     1 Carlos Duffy     Person\n 2     2 Min Qin          Person\n 3     3 Xiuying Xie      Person\n 4   267 Walter White     Person\n 5   274 Li Xie           Person\n 6   372 Tao Cui          Person\n 7   554 William Lynch    Person\n 8   555 Justin Morse     Person\n 9   556 Eduardo Gonzalez Person\n10   721 Ryan Devan       Person\n# ℹ 722 more rows"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#c2.-mapping-collaborators-of-the-oceanus-folk-community",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#c2.-mapping-collaborators-of-the-oceanus-folk-community",
    "title": "Take-Home Exercise 2",
    "section": "C2. Mapping collaborators of the Oceanus Folk Community",
    "text": "C2. Mapping collaborators of the Oceanus Folk Community\nThis step identifies artists, groups, or labels who collaborated with members of the Oceanus Folk community by co-creating the same songs. Collaboration is defined broadly to include performers, composers, lyricists, and producers. Any artist who shares a creative edge to the same song as an Oceanus Folk contributor is considered a collaborator of the Oceanus Folk community.\n\n\nShow the code\n# 1: Get all songs the Oceanus Folk community worked on\noceanus_songs_all_roles &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` %in% creative_roles,\n         source %in% oceanus_community$id) %&gt;%\n  pull(target) %&gt;%\n  unique()\n\n# 2: Find all contributors to those songs (excluding Oceanus community themselves)\ncollaborator_ids &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` %in% creative_roles,\n         target %in% oceanus_songs_all_roles,\n         !source %in% oceanus_community$id) %&gt;%\n  pull(source) %&gt;%\n  unique()\n\n# 3: Get node info for these collaborators\noceanus_collaborators &lt;- nodes_tbl %&gt;%\n  filter(id %in% collaborator_ids,\n         `Node Type` %in% c(\"Person\", \"MusicGroup\", \"RecordLabel\")) %&gt;%\n  select(id, name, type = `Node Type`)\n\n# View result\nprint(oceanus_collaborators)\n\n\n# A tibble: 913 × 3\n      id name         type  \n   &lt;int&gt; &lt;chr&gt;        &lt;chr&gt; \n 1    20 Xiuying Meng Person\n 2    52 Na Guo       Person\n 3   151 Gang Zhao    Person\n 4   163 Regina Hesse Person\n 5   172 Lei Liao     Person\n 6   197 Xia Ren      Person\n 7   201 Fang Zou     Person\n 8   202 Guiying Pan  Person\n 9   265 Wei Zhang    Person\n10   266 Ping Meng    Person\n# ℹ 903 more rows\n\n\n\nFocused heatmap of the Top 10 Collaborators vs Top 10 Oceanus Folk Members\n\n\nShow the code\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(forcats)\nlibrary(ggplot2)\n\n# 0. Parameters\ntop_n_collabs &lt;- 10\ntop_m_members &lt;- 10\n\n# 1. Ensure ID columns are character\noceanus_ids   &lt;- as.character(oceanus_community$id)\ncollab_ids    &lt;- as.character(collaborator_ids)\n\n# 2. Count shared‐song pairs\npair_counts &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` %in% creative_roles,\n         source %in% oceanus_ids) %&gt;%\n  transmute(oc_id = as.character(source), song = target) %&gt;%\n  inner_join(\n    edges_tbl %&gt;%\n      filter(`Edge Type` %in% creative_roles,\n             source %in% collab_ids) %&gt;%\n      transmute(collab_id = as.character(source), song = target),\n    by = \"song\"\n  ) %&gt;%\n  distinct(oc_id, collab_id, song) %&gt;%\n  count(oc_id, collab_id, name = \"shared_songs\")\n\n# 3. Build heatmap_df with names and complete zeros\nheatmap_df &lt;- pair_counts %&gt;%\n  left_join(\n    oceanus_community %&gt;% transmute(oc_id = as.character(id), oc_name = name),\n    by = \"oc_id\"\n  ) %&gt;%\n  left_join(\n    oceanus_collaborators %&gt;% transmute(collab_id = as.character(id), collab_name = name),\n    by = \"collab_id\"\n  ) %&gt;%\n  # fill in zeros for missing combos\n  complete(oc_name, collab_name, fill = list(shared_songs = 0))\n\n# 4. Pick Top N Collaborators\ntop_collabs &lt;- heatmap_df %&gt;%\n  group_by(collab_name) %&gt;%\n  summarize(total_shared = sum(shared_songs), .groups = \"drop\") %&gt;%\n  slice_max(total_shared, n = top_n_collabs) %&gt;%\n  pull(collab_name)\n\n# 5. Subset & pick Top M Members\nhm1 &lt;- heatmap_df %&gt;% filter(collab_name %in% top_collabs)\n\ntop_members &lt;- hm1 %&gt;%\n  group_by(oc_name) %&gt;%\n  summarize(total_shared = sum(shared_songs), .groups = \"drop\") %&gt;%\n  slice_max(total_shared, n = top_m_members) %&gt;%\n  pull(oc_name)\n\n# 6. Build the final small data frame\nhm_small2 &lt;- hm1 %&gt;%\n  filter(oc_name %in% top_members, !is.na(collab_name)) %&gt;%\n  mutate(\n    collab_name = fct_reorder(collab_name, shared_songs, .fun = sum),\n    oc_name     = fct_reorder(oc_name,     shared_songs, .fun = sum)\n  )\n\n# 7. Plot\nggplot(hm_small2, aes(x = collab_name, y = oc_name, fill = shared_songs)) +\n  geom_tile(color = \"grey90\") +\n  scale_fill_gradient(low = \"white\", high = \"Red\", name = \"Shared\\nSongs\") +\n  labs(\n    x     = sprintf(\"Top %d Collaborators\", top_n_collabs),\n    y     = sprintf(\"Top %d Oceanus Members\", top_m_members),\n    title = \"Heatmap of Top Collaborations\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),\n    axis.text.y = element_text(size = 8),\n    panel.grid   = element_blank()\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#c3.-tracing-sailor-shifts-influence-through-the-network",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#c3.-tracing-sailor-shifts-influence-through-the-network",
    "title": "Take-Home Exercise 2",
    "section": "C3. Tracing Sailor Shift’s Influence Through the Network",
    "text": "C3. Tracing Sailor Shift’s Influence Through the Network\nIn this step, we explore how Sailor Shift’s music has influenced the broader network of artists who have collaborated with the Oceanus Folk community. Specifically, we aim to identify which of these collaborators were directly or indirectly musically influenced by Sailor Shift through her songs.\nTo do this, we first constructed a subgraph of the musical influence network, focusing only on influence-type relationships such as CoverOf, InStyleOf, DirectlySamples, InterpolatesFrom, and LyricalReferenceTo. Starting from Sailor Shift’s original songs, we traversed these influence links to identify all downstream songs and artists that have been impacted either directly or through a chain of influence (multi-hop).\nWe then cross-referenced the results with the previously identified collaborators of the Oceanus Folk community, defined as artists who have shared performance, lyrical, compositional, or production credits on songs with Oceanus Folk artists. By intersecting these two groups, we determined which collaborators were musically influenced by Sailor’s work.\nFor each influenced collaborator, we recorded:\n\nThe name of the collaborator\nThe song(s) of theirs that were influenced\nThe specific Sailor Shift song(s) that served as the origin of influence\nThe number of influence steps (or hops) between Sailor’s song and the collaborator’s song\n\nThis approach allows us to trace the spread of Sailor Shift’s musical impact beyond her direct connections and into the wider music ecosystem surrounding the Oceanus Folk genre.\n\n\nShow the code\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(igraph)\nlibrary(tidyr)\n\n# Step 1: Prepare nodes \nnodes_tbl &lt;- nodes_tbl %&gt;%\n  mutate(id = as.character(id))  # IDs must be character for joining\n\nnodes_indexed &lt;- nodes_tbl %&gt;%\n  mutate(index = row_number())  # this will be used for igraph\n\n# Step 2: Create mapping table\nid_map &lt;- nodes_indexed %&gt;%\n  select(id, index)\n\n# Step 3\n# Start from a clean edges_tbl\nedges_base &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` %in% influence_types) %&gt;%\n  mutate(source = as.character(source), target = as.character(target))\n\n# First: Join for 'from'\nedges_with_from &lt;- edges_base %&gt;%\n  left_join(id_map, by = c(\"source\" = \"id\")) %&gt;%\n  rename(from_index = index)\n\n# Second: Join for 'to'\nedges_with_to &lt;- edges_with_from %&gt;%\n  left_join(id_map, by = c(\"target\" = \"id\")) %&gt;%\n  rename(to_index = index)\n\n# Final cleaned influence_edges\ninfluence_edges &lt;- edges_with_to %&gt;%\n  filter(!is.na(from_index) & !is.na(to_index)) %&gt;%\n  select(from = from_index, to = to_index, `Edge Type`)\n\n# Step 4: Build igraph using numeric index\ng &lt;- graph_from_data_frame(\n  d = influence_edges,\n  vertices = nodes_indexed %&gt;% select(index),  # use only index column as unique node IDs\n  directed = TRUE\n)\n\n# Step 5\nsailor_id &lt;- nodes_tbl %&gt;%\n  filter(name == \"Sailor Shift\") %&gt;%\n  pull(id)\n\nsailor_song_ids &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` == \"PerformerOf\", source == sailor_id) %&gt;%\n  pull(target) %&gt;%\n  as.character()\n\nsailor_song_indices &lt;- id_map %&gt;%\n  filter(id %in% sailor_song_ids) %&gt;%\n  pull(index)\n\n# Step 6\ndist_matrix &lt;- distances(g, v = sailor_song_indices, mode = \"out\")\n\n# Step 7\ndist_df &lt;- as.data.frame(dist_matrix) %&gt;%\n  rownames_to_column(\"sailor_song_index\") %&gt;%\n  pivot_longer(-sailor_song_index, names_to = \"influenced_index\", values_to = \"dist_from_sailor\") %&gt;%\n  filter(is.finite(dist_from_sailor)) %&gt;%\n  mutate(across(everything(), as.integer))\n\n# Step 8\n# Map indices back to node IDs\ndist_df &lt;- dist_df %&gt;%\n  left_join(nodes_indexed %&gt;% select(index, id), by = c(\"sailor_song_index\" = \"index\")) %&gt;%\n  rename(sailor_song_id = id) %&gt;%\n  left_join(nodes_indexed %&gt;% select(index, id), by = c(\"influenced_index\" = \"index\")) %&gt;%\n  rename(influenced_song_id = id)\n\n# Get song names\nsong_names &lt;- nodes_tbl %&gt;%\n  filter(`Node Type` == \"Song\") %&gt;%\n  select(id, song_name = name)\n\ndist_named &lt;- dist_df %&gt;%\n  left_join(song_names, by = c(\"sailor_song_id\" = \"id\")) %&gt;%\n  rename(sailor_song = song_name) %&gt;%\n  left_join(song_names, by = c(\"influenced_song_id\" = \"id\")) %&gt;%\n  rename(influenced_song = song_name)\n\n# Step 9\ncreative_roles &lt;- c(\"PerformerOf\", \"ComposerOf\", \"LyricistOf\", \"ProducerOf\")\n\ninfluenced_edges &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` %in% creative_roles,\n         target %in% dist_named$influenced_song_id,\n         source %in% oceanus_collaborators$id) %&gt;%\n  mutate(across(c(source, target), as.character))\n\nfinal_result &lt;- influenced_edges %&gt;%\n  left_join(nodes_tbl %&gt;% select(id, collaborator_name = name), by = c(\"source\" = \"id\")) %&gt;%\n  left_join(dist_named, by = c(\"target\" = \"influenced_song_id\"), relationship = \"many-to-many\") %&gt;%\n  select(collaborator_name, influenced_song, sailor_song, dist_from_sailor) %&gt;%\n  arrange(dist_from_sailor, collaborator_name)\n\n\nfinal_result &lt;- final_result %&gt;% filter(!is.na(sailor_song))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#c4.-results",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#c4.-results",
    "title": "Take-Home Exercise 2",
    "section": "C4. Results",
    "text": "C4. Results\nWe identified a subset of Oceanus Folk collaborators whose work was musically influenced by Sailor Shift, either directly or through multi-hop influence paths. Each influence link was traced from one of Sailor’s original songs through the musical knowledge graph, focusing on CoverOf, InterpolatesFrom, InStyleOf, and related relationships.\nWe produced a summary table and influence network diagram showing:\n\nThe collaborator name\nTheir influenced song\nThe original Sailor Shift song\nThe number of hops from Sailor’s song to theirs\n\nSongs like “Saltwater Hymn” and “Moon Over the Tide” played a key role in spreading Sailor Shift’s influence to other artists, even through several layers of connection.\n\nhead(final_result, 20)\n\n# A tibble: 16 × 4\n   collaborator_name  influenced_song               sailor_song dist_from_sailor\n   &lt;chr&gt;              &lt;chr&gt;                         &lt;chr&gt;                  &lt;int&gt;\n 1 Tao Gao            Silent Steps in the Forest's… Moon Over …                1\n 2 Tao Gao            Silent Steps in the Forest's… Moon Over …                1\n 3 Guiying Lu         Ripples and Whispers          Saltwater …                2\n 4 Guiying Lu         Ripples and Whispers          Saltwater …                2\n 5 Juan Gao           Ripples and Whispers          Saltwater …                2\n 6 Min Fu             Whispers of Finality          Moon Over …                2\n 7 Min Tao            Ripples and Whispers          Saltwater …                2\n 8 Min Tao            Ripples and Whispers          Saltwater …                2\n 9 David Schultz      Sunlight Whispers             Saltwater …                3\n10 Heather Wood       Sunlight Whispers             Saltwater …                3\n11 Jacqueline Dickson Sunlight Whispers             Saltwater …                3\n12 Jonathan Young     Sunlight Whispers             Saltwater …                3\n13 Jun Guo            Sunlight Whispers             Saltwater …                3\n14 Jun Guo            Sunlight Whispers             Saltwater …                3\n15 Laura Jefferson    Sunlight Whispers             Saltwater …                3\n16 Min Fu             Whispers of Finality          Saltwater …                4\n\n\n\nKey Insight:\nSailor Shift’s artistic influence extended well beyond her direct circle of collaborators. Her music indirectly shaped the work of several artists in the Oceanus Folk scene—highlighting her central role as both a founder and a source of inspiration for the genre.\n\n\nShow the code\nlibrary(tidygraph)\nlibrary(ggraph)\nlibrary(ggforce)\n\n# Step 1: Prepare nodes\nnode_table &lt;- final_result %&gt;%\n  pivot_longer(cols = c(sailor_song, influenced_song, collaborator_name),\n               names_to = \"type\", values_to = \"label\") %&gt;%\n  distinct(label, type) %&gt;%\n  mutate(id = row_number())\n\n# Step 2: Map each node label to ID\nlabel_to_id &lt;- node_table %&gt;% select(label, id)\n\n# Step 3: Build edges\nedges_song_to_song &lt;- final_result %&gt;%\n  select(from = sailor_song, to = influenced_song) %&gt;%\n  left_join(label_to_id, by = c(\"from\" = \"label\")) %&gt;%\n  rename(from_id = id) %&gt;%\n  left_join(label_to_id, by = c(\"to\" = \"label\")) %&gt;%\n  rename(to_id = id) %&gt;%\n  select(from = from_id, to = to_id) %&gt;%\n  mutate(type = \"influence\")\n\nedges_song_to_person &lt;- final_result %&gt;%\n  select(from = influenced_song, to = collaborator_name) %&gt;%\n  left_join(label_to_id, by = c(\"from\" = \"label\")) %&gt;%\n  rename(from_id = id) %&gt;%\n  left_join(label_to_id, by = c(\"to\" = \"label\")) %&gt;%\n  rename(to_id = id) %&gt;%\n  select(from = from_id, to = to_id) %&gt;%\n  mutate(type = \"collaboration\")\n\n# Add dist_from_sailor to influence edges\nedges_song_to_song &lt;- final_result %&gt;%\n  select(from = sailor_song, to = influenced_song, dist_from_sailor) %&gt;%\n  left_join(label_to_id, by = c(\"from\" = \"label\")) %&gt;%\n  rename(from_id = id) %&gt;%\n  left_join(label_to_id, by = c(\"to\" = \"label\")) %&gt;%\n  rename(to_id = id) %&gt;%\n  select(from = from_id, to = to_id, dist_from_sailor) %&gt;%\n  mutate(type = \"influence\")\n\n# Combine all edges\nedges_all &lt;- bind_rows(edges_song_to_song, edges_song_to_person)\n\n# Step 4: Build graph\ng &lt;- tbl_graph(nodes = node_table, edges = edges_all, directed = TRUE)\n\n\nlayout &lt;- create_layout(g, layout = \"fr\")\n\n# Pull node positions by index\nnodes_pos &lt;- layout %&gt;%\n  select(.ggraph.index, x, y)\n\n# Join coordinates to edge table\nedges_label_data &lt;- edges_all %&gt;%\n  filter(type == \"influence\" & !is.na(dist_from_sailor)) %&gt;%\n  left_join(nodes_pos, by = c(\"from\" = \".ggraph.index\")) %&gt;%\n  rename(x_from = x, y_from = y) %&gt;%\n  left_join(nodes_pos, by = c(\"to\" = \".ggraph.index\")) %&gt;%\n  rename(x_to = x, y_to = y) %&gt;%\n  mutate(\n    x = (x_from + x_to) / 2,\n    y = (y_from + y_to) / 2,\n    label = paste0(dist_from_sailor, \" hop\", ifelse(dist_from_sailor &gt; 1, \"s\", \"\"))\n  )\n\n\n\n\nPlot Network Graph\n\n\nShow the code\nggraph(layout) +\n  geom_edge_link(aes(color = type),\n                 arrow = arrow(length = unit(3, \"mm\")),\n                 end_cap = circle(2, 'mm')) +\n\n  geom_text(data = edges_label_data,\n            aes(x = x, y = y, label = label),\n            size = 3, fontface = \"italic\", color = \"black\") +\n\n  geom_node_point(aes(color = type), size = 4) +\n  geom_node_text(aes(label = label), repel = TRUE, size = 3) +\n\n  scale_edge_color_manual(values = c(\"influence\" = \"blue\", \"collaboration\" = \"darkgreen\")) +\n  scale_color_manual(values = c(\n    sailor_song = \"lightblue\",\n    influenced_song = \"gold\",\n    collaborator_name = \"lightgreen\"\n  )) +\n\n  theme_void() +\n  labs(\n    title = \"Sailor Shift's Influence on Oceanus Folk Collaborators\",\n    subtitle = \"Influence distances labeled along edges\"\n  )"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. In this website, you will find my coursework prepared for this course."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to model, analyse and visualise network data using R.\nLearning outcomes:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and build interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#overview",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "In this hands-on exercise, we will learn how to model, analyse and visualise network data using R.\nLearning outcomes:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and build interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5",
    "section": "27.2.1 Installing and launching R packages",
    "text": "27.2.1 Installing and launching R packages\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts, \n               concaveman, ggforce)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-network-data-from-files",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#importing-network-data-from-files",
    "title": "Hands-on Exercise 5",
    "section": "27.3.1 Importing network data from files",
    "text": "27.3.1 Importing network data from files\n\nGAStech_nodes &lt;- read_csv(\"Data_05/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"Data_05/GAStech_email_edge-v2.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-imported-data",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-imported-data",
    "title": "Hands-on Exercise 5",
    "section": "27.3.2 Reviewing the imported data",
    "text": "27.3.2 Reviewing the imported data\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe output report of GAStech_edges above reveals that the SentDate is treated as “Character” data type instead of date data type. This is an error! Before we continue, it is important for us to change the data type of SentDate field back to “Date”” data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-time",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-time",
    "title": "Hands-on Exercise 5",
    "section": "27.3.3 Wrangling time",
    "text": "27.3.3 Wrangling time\n\n\nShow the code\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\n\n\n\n\n\n\nThings to learn from the code above\n\n\n\n\nboth dmy() and wday() are functions of lubridate package. lubridate is an R package that makes it easier to work with dates and times.\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-date-fields",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-date-fields",
    "title": "Hands-on Exercise 5",
    "section": "27.3.4 Reviewing the revised date fields",
    "text": "27.3.4 Reviewing the revised date fields\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 10\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n$ SendDate    &lt;date&gt; 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-06, 2014-01-0…\n$ Weekday     &lt;ord&gt; Friday, Friday, Friday, Friday, Friday, Friday, Friday, Fr…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-attributes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#wrangling-attributes",
    "title": "Hands-on Exercise 5",
    "section": "27.3.5 Wrangling attributes",
    "text": "27.3.5 Wrangling attributes\nA close examination of GAStech_edges data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.\nIn view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.\n\n\nShow the code\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\n\nThings to learn from the code above\n\n\n\n\nfour functions from dplyr package are used. They are: filter(), group(), summarise(), and ungroup().\nThe output data.frame is called GAStech_edges_aggregated.\nA new field called Weight has been added in GAStech_edges_aggregated."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-edges-file",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-revised-edges-file",
    "title": "Hands-on Exercise 5",
    "section": "27.3.6 Reviewing the revised edges file",
    "text": "27.3.6 Reviewing the revised edges file\n\n\nShow the code\nglimpse(GAStech_edges_aggregated)\n\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#the-tbl_graph-object",
    "title": "Hands-on Exercise 5",
    "section": "27.4.1 The tbl_graph object",
    "text": "27.4.1 The tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\nThe dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#using-tbl_graph-to-build-tidygraph-data-model.",
    "title": "Hands-on Exercise 5",
    "section": "27.4.2 Using tbl_graph() to build tidygraph data model.",
    "text": "27.4.2 Using tbl_graph() to build tidygraph data model.\nWe will use tbl_graph() of tinygraph package to build an tidygraph’s network graph data.frame.\n\n\nShow the code\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#reviewing-the-output-tidygraphs-graph-object",
    "title": "Hands-on Exercise 5",
    "section": "27.4.3 Reviewing the output tidygraph’s graph object",
    "text": "27.4.3 Reviewing the output tidygraph’s graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges. The command also prints the first six rows of “Node Data” and the first three of “Edge Data”. It states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-active-object",
    "title": "Hands-on Exercise 5",
    "section": "27.4.4 Changing the active object",
    "text": "27.4.4 Changing the active object\nWe want to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use activate() and then arrange() to change the nodes tibble data frame which is activated by default.\n\n\nShow the code\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-a-basic-network-graph",
    "title": "Hands-on Exercise 5",
    "section": "27.5.1 Plotting a basic network graph",
    "text": "27.5.1 Plotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph.\n\n\nShow the code\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from this code above:\n\n\n\n\nThe basic plotting function is ggraph(), which takes the data to be used for the graph and the type of layout desired. Both of the arguments for ggraph() are built around igraph. Therefore, ggraph() can use either an igraph object or a tbl_graph object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#changing-the-default-network-graph-theme",
    "title": "Hands-on Exercise 5",
    "section": "27.5.2 Changing the default network graph theme",
    "text": "27.5.2 Changing the default network graph theme\nWe will use theme_graph() to remove the x and y axes.\n\n\nShow the code\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from this code above:\n\n\n\n\nggraph introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. theme_graph(), besides removing axes, grids, and border, changes the font to Arial Narrow (this can be overridden).\nThe ggraph theme can be set for a series of plots with the set_graph_style() command run before the graphs are plotted or by using theme_graph() in the individual plots."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#coloring-of-the-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#coloring-of-the-plot",
    "title": "Hands-on Exercise 5",
    "section": "27.5.3 Coloring of the plot",
    "text": "27.5.3 Coloring of the plot\n\n\nShow the code\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#fruchterman-and-reingold-layout",
    "title": "Hands-on Exercise 5",
    "section": "27.5.4 Fruchterman and Reingold layout",
    "text": "27.5.4 Fruchterman and Reingold layout\nThe code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.\n\n\nShow the code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code above:\n\n\n\nlayout argument is used to define the layout to be used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-network-nodes",
    "title": "Hands-on Exercise 5",
    "section": "27.5.5 Modifying network nodes",
    "text": "27.5.5 Modifying network nodes\n\n\nShow the code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code above:\n\n\n\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#modifying-edges",
    "title": "Hands-on Exercise 5",
    "section": "27.5.6 Modifying edges",
    "text": "27.5.6 Modifying edges\n\n\nShow the code\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThing to learn from the code above:\n\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument width is used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#computing-centrality-indices",
    "title": "Hands-on Exercise 5",
    "section": "27.7.1 Computing centrality indices",
    "text": "27.7.1 Computing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector.\n\n\nShow the code\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code above:\n\n\n\n\nmutate() of dplyr is used to perform the computation.\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualisation-network-metrics",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#visualisation-network-metrics",
    "title": "Hands-on Exercise 5",
    "section": "27.7.2 Visualisation Network Metrics",
    "text": "27.7.2 Visualisation Network Metrics\n\nggraphPlotgroup_edge_betweenness()PlotggforcePlot\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(\n    group_edge_betweenness(\n      weights = Weight, \n      directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(\n    aes(\n      width=Weight), \n    alpha=0.2) +\n  scale_edge_width(\n    range = c(0.1, 5)) +\n  geom_node_point(\n    aes(colour = community))  \n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(community = as.factor(\n    group_optimal(weights = Weight)),\n         betweenness_measure = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_mark_hull(\n    aes(x, y, \n        group = community, \n        fill = community),  \n    alpha = 0.2,  \n    expand = unit(0.3, \"cm\"),  # Expand\n    radius = unit(0.3, \"cm\")  # Smoothness\n  ) + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(fill = Department,\n                      size = betweenness_measure),\n                      color = \"black\",\n                      shape = 21)\n  \ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#data-preparation",
    "title": "Hands-on Exercise 5",
    "section": "27.8.1 Data preparation",
    "text": "27.8.1 Data preparation\n\n\nShow the code\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#plotting-the-first-interactive-network-graph",
    "title": "Hands-on Exercise 5",
    "section": "27.8.2 Plotting the first interactive network graph",
    "text": "27.8.2 Plotting the first interactive network graph\n\n\nShow the code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-layout",
    "title": "Hands-on Exercise 5",
    "section": "27.8.3 Working with layout",
    "text": "27.8.3 Working with layout\n\n\nShow the code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---nodes",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---nodes",
    "title": "Hands-on Exercise 5",
    "section": "27.8.4 Working with visual attributes - Nodes",
    "text": "27.8.4 Working with visual attributes - Nodes\nvisNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.\n\n\nShow the code\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\n\nWhen we rerun the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the group field.\n\n\nShow the code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html#working-with-visual-attributes---edges",
    "title": "Hands-on Exercise 5",
    "section": "27.8.5 Working with visual attributes - Edges",
    "text": "27.8.5 Working with visual attributes - Edges\n\n\nShow the code\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#configuring-selections",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#configuring-selections",
    "title": "Hands-on Exercise 03",
    "section": "3.3.1 Configuring selections",
    "text": "3.3.1 Configuring selections\nThe graphics produced by girafe() from a shiny application allows you to retrieve the element selections made by users.\nElements associated with data_id can be selected and the selection (the data_id value) is available in the client and the server side of the application. The selected identifiers will be the values mapped by the aesthetic data_id."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#type-of-selection",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#type-of-selection",
    "title": "Hands-on Exercise 03",
    "section": "3.3.2 Type of selection",
    "text": "3.3.2 Type of selection\nThe selection type can take several values: single, multiple or none.\n\nsingle : the user can only select one element. The click allows its selection if it is not selected, or its de-selection if it is already selected. Clicking on an unselected element automatically de-selects the other selected element.\nmultiple: the user can select several elements. He can do this by clicking on the elements or by selecting in the toolbar the “lasso selection” menu which allows you to draw a lasso on the graph and select all the elements contained in the lasso. The toolbar also contains an “anti-lasso selection” menu that allows you to draw a lasso on the graph and de-select all the elements contained in the lasso. The click is of course available for unit selections/de-selections.\nnone: no selection is allowed in the graph produced by girafe.\n\nAll these options can be configured with the following functions:\n\nopts_selection(): relative to panel selections\nopts_selection_key(): relative to legend selections\nopts_selection_theme(): relative to theme elements selections\n\n\nsingle with opts_selection()The codemultiple with opts_selection()The code\n\n\n\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\nmtcars_db &lt;- rownames_to_column(mtcars, var = \"carname\")\n\ngg_scatter &lt;- ggplot(\n  data = mtcars_db, \n  mapping = aes(\n    x = disp, y = qsec, tooltip = carname, \n    data_id = carname, color= wt)) +\n    geom_point_interactive(size=3)\n\ngirafe(ggobj = gg_scatter, \n  options = list(\n    opts_selection(\n      type = \"single\", \n      only_shiny = FALSE))\n)\n\n\n\n\npreselection &lt;- mtcars_db$carname[1:5]\ngirafe(ggobj = gg_scatter, \n  options = list(\n    opts_selection(\n      selected = preselection, \n      type = \"multiple\", \n      only_shiny = FALSE\n    )\n  )\n)\n\n\n\n\n\n\n\n\npreselection &lt;- mtcars_db$carname[1:5]\ngirafe(ggobj = gg_scatter, \n  options = list(\n    opts_selection(\n      selected = preselection, \n      type = \"multiple\", \n      only_shiny = FALSE\n    )\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effects-and-customizing-girafe-animations",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effects-and-customizing-girafe-animations",
    "title": "Hands-on Exercise 03",
    "section": "3.4.1 Hover effects and customizing girafe animations",
    "text": "3.4.1 Hover effects and customizing girafe animations\nAnother option can be used to alter aspect of non hovered elements. It is very useful to highlight hovered elements when the density of the elements is high by fixing less opacity on the other elements.\n\nHighlight hovered elementsStyling hover effectCombining tooltip and hover effectClick effect with onclickCoordinated Multiple Views with ggiraph\n\n\n\ndat &lt;- read.csv(\"C:/Users/marga/mgtr/ISS608-VAA/Hands-on_Ex/Hands-on_Ex03/Data_03/Exam_data.csv\")\n\ngg &lt;- ggplot(dat, aes(x = ENGLISH, y = MATHS, \n                      colour = RACE, group = GENDER)) +\n  geom_line_interactive(aes(tooltip = ID, data_id = ID)) +\n  scale_color_viridis_d() + \n  labs(title = \"move mouse over lines\")\n\nx &lt;- girafe(ggobj = gg, width_svg = 8, height_svg = 6,\n  options = list(\n    opts_hover_inv(css = \"opacity:0.1;\"),\n    opts_hover(css = \"stroke-width:2;\")\n  ))\n\nx\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)     \n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\n\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 03",
    "section": "3.4.2 Displaying statistics on tooltip",
    "text": "3.4.2 Displaying statistics on tooltip\n\nPlotThe code\n\n\n\n\n\n\n\n\n\n\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 03",
    "section": "3.6.1 Interactive Data Table: DT package",
    "text": "3.6.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 03",
    "section": "3.6.2 Linked brushing: crosstalk method",
    "text": "3.6.2 Linked brushing: crosstalk method\nThings to learn from the code:\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\nPlotThe code\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#ggiraph",
    "title": "Hands-on Exercise 03",
    "section": "3.7.1 ggiraph",
    "text": "3.7.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plotly-for-r",
    "title": "Hands-on Exercise 03",
    "section": "3.7.2 plotly for R",
    "text": "3.7.2 plotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#basic-concepts-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#basic-concepts-of-animation",
    "title": "Hands-on Exercise 03",
    "section": "4.1.1 Basic concepts of animation",
    "text": "4.1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n4.1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#loading-the-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#loading-the-r-packages",
    "title": "Hands-on Exercise 03",
    "section": "4.2.1 Loading the R packages",
    "text": "4.2.1 Loading the R packages\nFirst, a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "title": "Hands-on Exercise 03",
    "section": "4.2.2 Importing the data",
    "text": "4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family:\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"C:/Users/marga/mgtr/ISS608-VAA/Hands-on_Ex/Hands-on_Ex03/Data_03/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nacross() makes it easy to apply the same transformation to multiple columns, allowing you to use select() semantics inside in “data-masking” functions like summarise() and mutate().\nmutate of dplyr package is used to convert data values of Year field into integer."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-a-static-or-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-a-static-or-animated-bubble-plot",
    "title": "Hands-on Exercise 03",
    "section": "4.3.1 Building a static or animated bubble plot",
    "text": "4.3.1 Building a static or animated bubble plot\nIn the code chunks below, the basic ggplot2 functions are used to create a static bubble plot as well as transition_time() of gganimate is used to create transition through distinct states in time (i.e. Year). ease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\nStatic bubble plotThe codeAnimated plotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#line-animated-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#line-animated-plot",
    "title": "Hands-on Exercise 03",
    "section": "4.4.1 Line Animated Plot",
    "text": "4.4.1 Line Animated Plot\n\nPlotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(globalPop, aes(x = Year, y = Young, group = Country, color = Country)) +\n  geom_line() +\n  labs(x = \"Year\", y = \"% Young Population\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n# Animated reveal\np + transition_reveal(Year)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-transition-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#data-transition-plot",
    "title": "Hands-on Exercise 03",
    "section": "4.4.2 Data Transition Plot",
    "text": "4.4.2 Data Transition Plot\n\nlibrary(dplyr)\n\nmean_young &lt;- globalPop %&gt;%\n  group_by(Year) %&gt;%\n  summarise(MeanYoung = mean(Young, na.rm = TRUE))\n\n\nPlotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(mean_young, aes(x = Year, y = MeanYoung, fill = MeanYoung)) +\n  geom_col() +\n  scale_fill_distiller(palette = \"Blues\", direction = 1) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.grid.major.y = element_line(color = \"white\"),\n    panel.ontop = TRUE\n  )\n\np + \n  transition_states(Year, wrap = FALSE) +\n  shadow_mark() +\n  enter_grow() +\n  enter_fade()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plot-using-the-gapminder",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#plot-using-the-gapminder",
    "title": "Hands-on Exercise 03",
    "section": "4.4.4 Plot using the gapminder",
    "text": "4.4.4 Plot using the gapminder\n\nPlotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, show.legend = FALSE) +\n  # Remove this line or define country_colors as a named vector\n  # scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  facet_wrap(~Continent) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +\n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 03",
    "section": "4.5.1 an animated bubble plot: ggplotly() method",
    "text": "4.5.1 an animated bubble plot: ggplotly() method\n\nPlotThe codePlot (without legend)The code\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 03",
    "section": "4.5.2 an animated bubble plot: plot_ly() method",
    "text": "4.5.2 an animated bubble plot: plot_ly() method\n\nPlotThe code\n\n\n\n\n\n\n\n\n\n\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#learning-outcome",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#install-and-launching-r-packages",
    "title": "Hands-on Exercise 1",
    "section": "Install and launching R packages",
    "text": "Install and launching R packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#importing-the-data",
    "title": "Hands-on Exercise 1",
    "section": "Importing the data",
    "text": "Importing the data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "Hands-on Exercise 1",
    "section": "1.3.1 R Graphics VS ggplot",
    "text": "1.3.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nAs you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?\nAs pointed out by Hadley Wickham\n\n\n\n\n\n\nImportant\n\n\n\nThe transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "1.4.1 A Layered Grammar of Graphics",
    "text": "1.4.1 A Layered Grammar of Graphics\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_bar",
    "title": "Hands-on Exercise 1",
    "section": "1.7.1 Geometric Objects: geom_bar",
    "text": "1.7.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_dotplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.2 Geometric Objects: geom_dotplot",
    "text": "1.7.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBe warned\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe code chunk below performs the following two steps:\n\nscale_y_continuous() is used to turn off the y-axis, and\nbinwidth argument is used to change the binwidth to 2.5.\n\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_histogram",
    "title": "Hands-on Exercise 1",
    "section": "1.7.3 Geometric Objects: geom_histogram()",
    "text": "1.7.3 Geometric Objects: geom_histogram()\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that the default bin is 30."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1",
    "section": "1.7.4 Modifying a geometric object by changing geom()",
    "text": "1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1",
    "section": "1.7.5 Modifying a geometric object by changing aes()",
    "text": "1.7.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom-density",
    "title": "Hands-on Exercise 1",
    "section": "1.7.6 Geometric Objects: geom-density()",
    "text": "1.7.6 Geometric Objects: geom-density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_boxplot",
    "title": "Hands-on Exercise 1",
    "section": "1.7.7 Geometric Objects: geom_boxplot",
    "text": "1.7.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_violin",
    "title": "Hands-on Exercise 1",
    "section": "1.7.8 Geometric Objects: geom_violin",
    "text": "1.7.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geometric-objects-geom_point",
    "title": "Hands-on Exercise 1",
    "section": "1.7.9 Geometric Objects: geom_point()",
    "text": "1.7.9 Geometric Objects: geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-can-be-combined",
    "title": "Hands-on Exercise 1",
    "section": "1.7.10 geom objects can be combined",
    "text": "1.7.10 geom objects can be combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat",
    "title": "Hands-on Exercise 1",
    "section": "1.8.1 Working with stat()",
    "text": "1.8.1 Working with stat()\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.2 Working with stat - the stat_summary() method",
    "text": "1.8.2 Working with stat - the stat_summary() method\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1",
    "section": "1.8.3 Working with stat - the geom() method",
    "text": "1.8.3 Working with stat - the geom() method\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1",
    "section": "1.8.4 Adding a best fit curve on a scatterplot?",
    "text": "1.8.4 Adding a best fit curve on a scatterplot?\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe default method used is loess.\n\n\n\nThe default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1",
    "section": "1.9.1 Working with facet_wrap()",
    "text": "1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#facet_grid-function",
    "title": "Hands-on Exercise 1",
    "section": "1.9.2 facet_grid() function",
    "text": "1.9.2 facet_grid() function\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-coordinate",
    "title": "Hands-on Exercise 1",
    "section": "1.10.1 Working with Coordinate",
    "text": "1.10.1 Working with Coordinate\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1",
    "section": "1.10.2 Changing the y- and x-axis range",
    "text": "1.10.2 Changing the y- and x-axis range\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-theme",
    "title": "Hands-on Exercise 1",
    "section": "1.11.1 Working with theme",
    "text": "1.11.1 Working with theme\nThe code chunk below plot a horizontal bar chart using theme_gray().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_classic().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\nA horizontal bar chart plotted using theme_minimal().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-on Exercise 1",
    "section": "1.12 Reference",
    "text": "1.12 Reference\n\nHadley Wickham (2023) ggplot2:Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition.Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 2",
    "section": "2.1.1 Installing and loading the required libraries",
    "text": "2.1.1 Installing and loading the required libraries\nIn this exercise, beside tidyverse, four R packages will be used. They are:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 2",
    "section": "2.4.1 Working with hrbthems package",
    "text": "2.4.1 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\nThe second goal centers around productivity for a production workflow. In fact, this “production workflow” is the context for where the elements of hrbrthemes should be used. Consult this vignette to learn more\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-pathwork-methods",
    "title": "Hands-on Exercise 2",
    "section": "2.5.1 Creating Composite Graphics: pathwork methods",
    "text": "2.5.1 Creating Composite Graphics: pathwork methods\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() ofcowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\nplotThe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "Hands-on Exercise 2",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\nplotthe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(p1 / p2) | p3\n\n\n\n\nTo learn more about, refer to Plot Assembly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-with-tag",
    "title": "Hands-on Exercise 2",
    "section": "2.5.4 Creating a composite figure with tag",
    "text": "2.5.4 Creating a composite figure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\nplotthe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "Hands-on Exercise 2",
    "section": "2.5.5 Creating figure with insert",
    "text": "2.5.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\nplotthe code\n\n\n\n\n\n\n\n\n\n\n\n\n\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Visualising distribution is not new in statistical analysis. In chapter 1, we have shared some of the popular statistical graphics methods for visualising distribution are histogram, probability density curve (pdf), boxplot, notch plot and violin plot and how they can be created by using ggplot2. In this chapter, we are going to share two relatively new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-the-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4",
    "section": "9.2.1 Installing and loading the packages",
    "text": "9.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\nggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\ntidyverse, a family of R packages to meet the modern data science and visual communication needs,\nggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\ncolorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\nThe code chunk below will be used load these R packages into RStudio environment.\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-import",
    "title": "Hands-on Exercise 4",
    "section": "9.2.2 Data import",
    "text": "9.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\nIn the code chunk below, read_csv() of readr package is used to import Exam_data.csv into R and saved it into a tibble data.frame.\n\nexam &lt;- read_csv(\"Data_04/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-ridgeline-graph-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-ridgeline-graph-ggridges-method",
    "title": "Hands-on Exercise 4",
    "section": "9.3.1 Plotting ridgeline graph: ggridges method",
    "text": "9.3.1 Plotting ridgeline graph: ggridges method\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges(). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\n\nShow the code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#varying-fill-colors-along-the-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#varying-fill-colors-along-the-x-axis",
    "title": "Hands-on Exercise 4",
    "section": "9.3.2 Varying fill colors along the x axis",
    "text": "9.3.2 Varying fill colors along the x axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\n\nShow the code\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-on Exercise 4",
    "section": "9.3.3 Mapping the probabilities directly onto colour",
    "text": "9.3.3 Mapping the probabilities directly onto colour\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\n\nShow the code\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on Exercise 4",
    "section": "9.3.4 Ridgeline plots with quantile lines",
    "text": "9.3.4 Ridgeline plots with quantile lines\ny using geom_density_ridges_gradient(), we can colour the ridgeline plot by quantile, via the calculated stat(quantile) aesthetic as shown in the figures below.\n\nPlotCodeSpecify quantiles by cut pointsCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-a-half-eye-graph",
    "title": "Hands-on Exercise 4",
    "section": "Plotting a Half Eye graph",
    "text": "Plotting a Half Eye graph\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands-on Exercise 4",
    "section": "Adding the boxplot with geom_boxplot()",
    "text": "Adding the boxplot with geom_boxplot()\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-on Exercise 4",
    "section": "Adding the Dot Plots with stat_dots()",
    "text": "Adding the Dot Plots with stat_dots()\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#finishing-touch",
    "title": "Hands-on Exercise 4",
    "section": "Finishing touch",
    "text": "Finishing touch\n\n\nShow the code\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n\n\n\n\n\n\n\n\n\nReference\n\nIntroducing Ridgeline Plots (formerly Joyplots)\nClaus O. Wilke Fundamentals of Data Visualization especially Chapter 6, 7, 8, 9 and 10.\nAllen M, Poggiali D, Whitaker K et al. “Raincloud plots: a multi-platform tool for robust data. visualization” [version 2; peer review: 2 approved]. Welcome Open Res 2021, pp. 4:63.\nDots + interval stats and geoms"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#getting-started-1",
    "title": "Hands-on Exercise 4",
    "section": "10.1 Getting Started",
    "text": "10.1 Getting Started"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-launching-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 4",
    "section": "10.1.1 Installing and launching R packages",
    "text": "10.1.1 Installing and launching R packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#importing-data",
    "title": "Hands-on Exercise 4",
    "section": "10.1.2 Importing data",
    "text": "10.1.2 Importing data\n\nlibrary(tidyverse)\n\nexam &lt;- read_csv(\"Data_04/Exam_data.csv\")\n\nprint(exam)\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test-gghistostats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Exercise 4",
    "section": "10.1.3 One-sample test: gghistostats() method",
    "text": "10.1.3 One-sample test: gghistostats() method\n\n\nShow the code\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4",
    "section": "10.1.4 Two-sample mean test: ggbetweenstats()",
    "text": "10.1.4 Two-sample mean test: ggbetweenstats()\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#oneway-anova-test-ggbetweenstats-method",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#oneway-anova-test-ggbetweenstats-method",
    "title": "Hands-on Exercise 4",
    "section": "10.1.5 Oneway ANOVA Test: ggbetweenstats() method",
    "text": "10.1.5 Oneway ANOVA Test: ggbetweenstats() method\n\n\nShow the code\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4",
    "section": "10.1.6 Significant Test of Correlation: ggscatterstats()",
    "text": "10.1.6 Significant Test of Correlation: ggscatterstats()\n\n\nShow the code\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-association-depedence-ggbarstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#significant-test-of-association-depedence-ggbarstats-methods",
    "title": "Hands-on Exercise 4",
    "section": "10.1.7 Significant Test of Association (Depedence) : ggbarstats() methods",
    "text": "10.1.7 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut().\n\n\nShow the code\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\n\nShow the code\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-the-packages-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-the-packages-1",
    "title": "Hands-on Exercise 4",
    "section": "11.2.1 Installing and loading the packages",
    "text": "11.2.1 Installing and loading the packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\npacman::p_load(plotly, crosstalk, DT, \n               ggdist, ggridges, colorspace,\n               gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-import-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#data-import-1",
    "title": "Hands-on Exercise 4",
    "section": "11.2.2 Data import",
    "text": "11.2.2 Data import\nFor the purpose of this exercise, Exam_data.csv will be used.\n\nexam &lt;- read_csv(\"Data_04/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on Exercise 4",
    "section": "11.3.1 Plotting standard error bars of point estimates",
    "text": "11.3.1 Plotting standard error bars of point estimates\n\n\n\n\n\n\nThings to learn from the code chunk below\n\n\n\nThe error bars are computed by using the formula mean+/-se. For geom_point(), it is important to indicate stat=“identity”.\n\n\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on Exercise 4",
    "section": "11.3.2 Plotting confidence interval of point estimates",
    "text": "11.3.2 Plotting confidence interval of point estimates\n\n\n\n\n\n\nThings to learn from the code chunk below\n\n\n\n\nThe confidence intervals are computed by using the formula mean+/-1.96*se.\nThe error bars is sorted by using the average maths scores.\nlabs() argument of ggplot2 is used to change the x-axis label.\n\n\n\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    linewidth=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on Exercise 4",
    "section": "11.3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "11.3.3 Visualizing the uncertainty of point estimates with interactive error bars\n\n\nShow the code\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4",
    "section": "11.3.4 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "11.3.4 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\nPlotCodeDifferent argumentsCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#makeover-the-plot-on-previous-slide-by-showing-95-and-99-confidence-intervals.",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#makeover-the-plot-on-previous-slide-by-showing-95-and-99-confidence-intervals.",
    "title": "Hands-on Exercise 4",
    "section": "11.3.5 Makeover the plot on previous slide by showing 95% and 99% confidence intervals.",
    "text": "11.3.5 Makeover the plot on previous slide by showing 95% and 99% confidence intervals.\n\n\nShow the code\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = c(0.95, 0.99),  # To show both 95% and 99% intervals\n    .point = median,\n    .interval = qi\n  ) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot (95% & 99%)\"\n  )\n\n\n\n\n\n\n\n\n\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nShow the code\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-ungeviz-package",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-ungeviz-package",
    "title": "Hands-on Exercise 4",
    "section": "11.4.1 Installing ungeviz package",
    "text": "11.4.1 Installing ungeviz package\n\ndevtools::install_github(\"wilkelab/ungeviz\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#launch-the-application-in-r",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#launch-the-application-in-r",
    "title": "Hands-on Exercise 4",
    "section": "11.4.2 Launch the application in R",
    "text": "11.4.2 Launch the application in R\n\nlibrary(ungeviz)\n\nCode chunk below will be used to build the HOPs:\n\n\nShow the code\nggplot(data = exam, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_bw() + \n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Exercise 4",
    "section": "8.4.1 FunnelPlotR methods: The basic plot",
    "text": "8.4.1 FunnelPlotR methods: The basic plot\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_typeargument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#funnelplotr-methods-makeover-1",
    "title": "Hands-on Exercise 4",
    "section": "8.4.2 FunnelPlotR methods: Makeover 1",
    "text": "8.4.2 FunnelPlotR methods: Makeover 1\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-the-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#computing-the-basic-derived-fields",
    "title": "Hands-on Exercise 4",
    "section": "8.5.1 Computing the basic derived fields",
    "text": "8.5.1 Computing the basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nNext, the fit.mean is computed by using the code chunk below.\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "Hands-on Exercise 4",
    "section": "8.5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "8.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\n\nShow the code\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Exercise 4",
    "section": "8.5.3 Plotting a static funnel plot",
    "text": "8.5.3 Plotting a static funnel plot\n\n\nShow the code\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Exercise 4",
    "section": "8.5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "8.5.4 Interactive Funnel Plot: plotly + ggplot2\n\n\nShow the code\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#examining-the-data-structure",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#examining-the-data-structure",
    "title": "Hands-on Exercise 06",
    "section": "17.3.2 Examining the data structure",
    "text": "17.3.2 Examining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\ntz field stores time zone of the source IP address."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#data-preparation",
    "title": "Hands-on Exercise 06",
    "section": "17.3.3 Data Preparation",
    "text": "17.3.3 Data Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\n\nShow the code\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nymd_hms() and hour() are from lubridate package, and\nweekdays() is a base R function.\n\n\n\nStep 2: Deriving the attacks tibble data frame\n\n\nShow the code\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\n\n\n\n\n\n\n\nNote\n\n\n\nBeside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\n\n\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "title": "Hands-on Exercise 06",
    "section": "17.3.4 Building the Calendar Heatmaps",
    "text": "17.3.4 Building the Calendar Heatmaps\n\n\nShow the code\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high)."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "title": "Hands-on Exercise 06",
    "section": "17.3.5 Building Multiple Calendar Heatmaps",
    "text": "17.3.5 Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#plotting-cycle-plot",
    "title": "Hands-on Exercise 06",
    "section": "17.3.6 Plotting Cycle Plot",
    "text": "17.3.6 Plotting Cycle Plot\n\nStep 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\n\nair &lt;- read_excel(\"Data_06/arrivals_by_air.xlsx\")\n\n\n\nStep 2: Deriving month and year fields\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\nStep 3: Extracting the target country\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\nStep 4: Computing year average arrivals by month\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\nStep 5: Plotting the cycle plot\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_light()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#setting-the-scene",
    "title": "Take-home Exercise 1",
    "section": "1.1 Setting the scene",
    "text": "1.1 Setting the scene\nA local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024. This project will explore the demographic structure of Singapore’s resident population as of June 2024, which aims to uncover both national and regional trends in age distribution, gender composition, and population disparities across planning areas."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tasks",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#tasks",
    "title": "Take-home Exercise 1",
    "section": "1.2 Tasks",
    "text": "1.2 Tasks\nAs the graphical editor of the media company, this project aim to:\n\nClean and preprocess the demographic dataset.\nDesign and generate three targeted data visualizations:\n\n\nTop 10 Planning Areas by Total Population: A horizontal bar chart focusing on the ten most populous planning areas to highlight urban population concentration, particularly in areas like Tampines, Bedok, and Sengkang.\nPopulation Pyramid by Age and Sex: A detailed pyramid chart that illustrates Singapore’s national age and gender structure, revealing the dominance of the working-age population, the presence of an aging society, and gender differences in older age groups.\n\n\n\nAge and Gender Distribution in Top 5 Planning Areas: A set of stacked bar and ridgeline plots showing how population varies by age group and gender within the top five planning areas, offering insights into regional differences in youth, working-age, and elderly populations.\n\n\nSummarize key insights for each visualization to support the narrative."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#loading-packages",
    "title": "Take-home Exercise 1",
    "section": "2.1 Loading Packages",
    "text": "2.1 Loading Packages\nThe code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.\n\npacman::p_load(tidyverse)\n\nBeside tidyverse, following R packages will be used:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\nhaven: Enables reading and writing of data files from statistical software packages like SPSS, Stata, and SAS.\nggiraph: for making ‘ggplot’ graphics interactive.\nplotly: R library for plotting interactive statistical graphs.\nDT: provides an R interface to the JavaScript library DataTables that create interactive table on html page.\nknitr: Facilitates dynamic report generation by integrating R code into documents (used in R Markdown).\nscales: Provides functions for scaling axes and legends in ggplot2 plots, including formatting numbers and dates.\nggridges: Allows creation of ridgeline plots (overlapping density plots) in ggplot2.\nggpubr: Enhances ggplot2 with publication-ready themes and functions for common tasks like adding statistical comparisons.\ngganimate: Adds animation capabilities to ggplot2 visualizations.\ngapminder: An excerpt of the data available at Gapminder.org.\nggdist: Supports visualizations of distributions and uncertainty (e.g., intervals, densities) in ggplot2.\nggtext: Enables advanced text rendering (e.g., HTML/Markdown) in ggplot2 titles, subtitles, and labels\nggalt: Provides alternative geoms and statistical transformations not available in core ggplot2.\ncowplot: Offers streamlined tools to align and arrange ggplot2-based plots into panels.\n\n\npacman::p_load(tidyverse, ggrepel, ggthemes, \n               hrbrthemes, patchwork, \n               haven, ggiraph, plotly, DT, \n               knitr, scales,\n               ggridges, ggpubr, \n               gganimate, gapminder, ggdist, \n               ggtext, ggalt,\n               cowplot)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#cleaning-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#cleaning-data",
    "title": "Take-home Exercise 1",
    "section": "2.2 Cleaning data",
    "text": "2.2 Cleaning data\nTo prepare the dataset for all tasks, the following code will loads, cleans, and prepares the demographic data (respopagesex2024.csv) for analysis and visualization to make sure:\n\nAll numeric columns are actually numeric (for calculations)\nCategorical columns behave predictably (for grouping)\nOnly analyzing valid population entries (no missing or zero values).\n\n\nlibrary(readr)\nlibrary(dplyr)\n\n# Load the dataset\nrespop &lt;- read_csv(\"TakeHome_01/respopagesex2024.csv\")\n\n# Convert types and clean\nrespop_clean &lt;- respop %&gt;%\n  mutate(\n    Pop = as.numeric(Pop),\n    Age = as.numeric(Age),\n    PA = as.factor(PA),\n    SZ = as.factor(SZ),\n    Sex = factor(Sex, levels = c(\"Males\", \"Females\"))\n  ) %&gt;%\n  filter(!is.na(Pop), Pop &gt; 0)\n\nThe following code chunk will loads the dataset.\n\nCleans it by ensuring population values are numeric and valid.\nAggregates population totals by planning area.\nOutputs a basic statistical overview of how population is distributed across Singapore’s planning areas.\n\n\n  library(readr)\n  library(dplyr)\n  library(ggplot2)\n  library(scales)\n\n  # Load and summarize population data\n  respopagesex2024 &lt;- read_csv(\"TakeHome_01/respopagesex2024.csv\")\n  pop_by_pa &lt;- respopagesex2024 %&gt;%\n    mutate(Pop = as.numeric(Pop)) %&gt;%\n    filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n    group_by(PA) %&gt;%\n    summarise(Total_Pop = sum(Pop, na.rm = TRUE))\n\n  # Check population range\n  print(summary(pop_by_pa$Total_Pop))\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    140    8432   94700   99846  157685  284950 \n\n\nThe following code chunk will loads the dataset, deep clean and check for missing or abnormal entries.\n\nsummary(respopagesex2024)\n\n      PA                 SZ                Age                Sex           \n Length:60424       Length:60424       Length:60424       Length:60424      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n      Pop              Time     \n Min.   :   0.0   Min.   :2024  \n 1st Qu.:   0.0   1st Qu.:2024  \n Median :  20.0   Median :2024  \n Mean   :  69.4   Mean   :2024  \n 3rd Qu.:  90.0   3rd Qu.:2024  \n Max.   :1180.0   Max.   :2024  \n\nany(is.na(respopagesex2024$PA))\n\n[1] FALSE\n\nany(is.na(respopagesex2024$SZ))\n\n[1] FALSE\n\nany(respopagesex2024$PA == \"\")\n\n[1] FALSE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-1",
    "title": "Take-home Exercise 1",
    "section": "Plot 1",
    "text": "Plot 1\n\n\nShow the code\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(readr)\n\n# Load data\nrespopagesex2024 &lt;- read_csv(\"TakeHome_01/respopagesex2024.csv\")\n\n# Clean and summarize population by PA\npop_by_pa &lt;- respopagesex2024 %&gt;%\n  mutate(Pop = as.numeric(Pop)) %&gt;%\n  filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Total_Pop = sum(Pop, na.rm = TRUE),\n    Num_Subzones = n_distinct(SZ)\n  ) %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_max(order_by = Total_Pop, n = 10) \n\n# Plot\nggplot(pop_by_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", fill = \"grey70\", color = \"grey90\") +\n  geom_text(aes(label = comma(Total_Pop)), hjust = -0.1, size = 3.5) +  # Add labels\n  coord_flip() +  # Horizontal bars\n  theme_minimal() +\n  labs(\n    title = \"Top 10 Most Populous Planning Areas (2024)\",\n    x = \"Planning Area\",\n    y = \"Total Population\"\n  ) +\n  scale_y_continuous(\n    labels = comma,\n    limits = c(0, max(pop_by_pa$Total_Pop) * 1.1)  # Extra space for text\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-2",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-2",
    "title": "Take-home Exercise 1",
    "section": "Plot 2",
    "text": "Plot 2\n\n\nShow the code\n# Disable scientific notation globally\noptions(scipen = 999)\n\n# Load data\nrespopagesex2024 &lt;- read_csv(\"TakeHome_01/respopagesex2024.csv\")\n\n# Trim whitespace from PA and SZ\nrespopagesex2024 &lt;- respopagesex2024 %&gt;%\n  mutate(\n    PA = trimws(PA),\n    SZ = trimws(SZ)\n  )\n\n# Clean and summarize population by PA, including subzone count\npop_by_pa &lt;- respopagesex2024 %&gt;%\n  mutate(Pop = as.numeric(Pop)) %&gt;%\n  filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Total_Pop = sum(Pop, na.rm = TRUE),\n    Num_Subzones = n_distinct(SZ)  # Count unique subzones per PA\n  ) %&gt;%\n  arrange(desc(Total_Pop))\n\n# Create bar chart\np &lt;- ggplot(data = pop_by_pa, aes(x = reorder(PA, Total_Pop), y = Total_Pop)) +\n  geom_bar(\n    stat = \"identity\",\n    fill = \"grey70\",\n    color = \"grey90\"\n  ) +\n  geom_text(\n    aes(label = comma(Total_Pop)),\n    angle = 90,      # Keep text horizontal\n    hjust = 0.5,    # Center horizontally\n    vjust = -0.5,   # Above the bar\n    size = 3\n  ) +\n  theme_bw() +\n  ggtitle(\"Population Per Planning Area (2024)\") +\n  xlab(\"Planning Area\") +\n  ylab(\"Total Population\") +\n  theme(\n    axis.text.x = element_text(angle = 55, hjust = 1)\n  ) +\n  scale_y_continuous(\n    labels = comma,\n    breaks = seq(0, ceiling(max(pop_by_pa$Total_Pop, na.rm = TRUE) / 100000) * 100000, by = 100000),\n    limits = c(0, ceiling(max(pop_by_pa$Total_Pop, na.rm = TRUE) / 100000) * 100000)\n  )\n\nprint(p)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight",
    "title": "Take-home Exercise 1",
    "section": "Insight",
    "text": "Insight\n\nPlot 1, a bar chart, lists the top 10 most populous planning areas (PAs): Tampines (284,950), Bedok (277,660), Sengkang (265,550), Jurong West (257,910), Woodlands (255,510), Yishun (230,320), Hougang (228,780), Punggol (199,880), Choa Chu Kang (190,640), and Bukit Batok (168,390). This highlights Tampines as the densest hub.\nPlot 2, a stacked bar chart, shows total population across all PAs, with the top 10 aligning with Plot 1’s rankings, peaking at Tampines and tapering off in less populated areas like Western Water Catchment.\nBoth plots confirm a concentration of population in urban PAs, with a clear hierarchy led by Tampines, Bedok, and Sengkang. This indicate a need for targeted infrastructure and services in these high-density areas, with potential resource allocation challenges in less populated regions."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-1-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-1-1",
    "title": "Take-home Exercise 1",
    "section": "Plot 1",
    "text": "Plot 1\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Group into 5-year bins and summarise\npyramid_data &lt;- respopagesex2024 %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    Age_Group = cut(Age,\n                    breaks = seq(0, 100, by = 5),\n                    labels = paste(seq(0, 95, by = 5), seq(4, 99, by = 5), sep = \"-\"),\n                    include.lowest = TRUE)\n  ) %&gt;%\n  filter(Sex %in% c(\"Males\", \"Females\")) %&gt;%\n  group_by(Age_Group, Sex) %&gt;%\n  summarise(Total_Pop = sum(Pop, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  mutate(Population = ifelse(Sex == \"Males\", -Total_Pop, Total_Pop))\n\n# Ensure proper order for Age_Group\npyramid_data$Age_Group &lt;- factor(pyramid_data$Age_Group, levels = unique(pyramid_data$Age_Group))\n\n# Plot the age pyramid\nggplot(pyramid_data, aes(x = Population, y = Age_Group, fill = Sex)) +\n  geom_bar(stat = \"identity\") +\n  scale_x_continuous(labels = abs, name = \"Population\") +\n  scale_y_discrete(name = \"Age Group\") +\n  scale_fill_manual(values = c(\"Males\" = \"grey70\", \"Females\" = \"grey90\")) +\n  theme_bw() +\n  ggtitle(\"Singapore Population Pyramid (2024)\") +\n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-2-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-2-1",
    "title": "Take-home Exercise 1",
    "section": "Plot 2",
    "text": "Plot 2\n\n\nShow the code\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\n\n# Disable scientific notation\noptions(scipen = 999)\n\n# Load data\nrespopagesex2024 &lt;- read_csv(\"TakeHome_01/respopagesex2024.csv\")\n\n# Convert Age Seyfert’s correction for age groups\npop_by_age &lt;- respopagesex2024 %&gt;%\n  mutate(\n    Pop = as.numeric(Pop),\n    Age_Num = case_when(\n      Age == \"90_and_Over\" ~ 90,\n      TRUE ~ as.numeric(gsub(\"–.*\", \"\", Age)) + 2.5  # Midpoint of 5-year age groups\n    )\n  ) %&gt;%\n  filter(!is.na(Pop) & Pop &gt; 0)\n\n# Expand data to represent each individual\nage_data &lt;- pop_by_age %&gt;%\n  uncount(Pop)  # Repeats each row by Pop value\n\n# Create histogram\np &lt;- ggplot(data = age_data, aes(x = Age_Num)) +\n  geom_histogram(\n    binwidth = 5,  # 5-year age bins\n    fill = \"grey70\",\n    color = \"grey90\"\n  ) +\n  theme_bw() +\n  ggtitle(\"Age Distribution of Singapore Population, 2024\") +\n  xlab(\"Age (Years)\") +\n  ylab(\"Population\") +\n  scale_x_continuous(\n    breaks = seq(0, 100, by = 10),\n    limits = c(0, 100)\n  ) +\n  scale_y_continuous(labels = comma)\n\n# Render plot\nprint(p)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-1",
    "title": "Take-home Exercise 1",
    "section": "Insight",
    "text": "Insight\n\nPlot 1, a population pyramid, shows the age and gender distribution across the entire population, with a broad working-age base (30–59), a smaller youth (0–19), and aN elderly group (60–80+). Females slightly outnumber males in the 70+ age groups, reflecting higher life expectancy.\nPlot 2, a histogram, displays the overall age distribution, confirming the working-age peak (30–50 years), a small youth population, and a gradual increase in elderly (60–80+), with a slight female skew in older ages.\nTogether, they highlight Singapore’s aging population, with a shrinking youth base, a dominant working-age group, and a gender imbalance in the elderly (more females). This indicate a need for eldercare (especially for females), workforce support, and policies to address low birth rates."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-1-2",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-1-2",
    "title": "Take-home Exercise 1",
    "section": "Plot 1",
    "text": "Plot 1\n\n\nShow the code\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\n\n# Disable scientific notation\noptions(scipen = 999)\n\n# Load data\nrespopagesex2024 &lt;- read_csv(\"TakeHome_01/respopagesex2024.csv\")\n\n# Create age groups\npop_by_pa_age &lt;- respopagesex2024 %&gt;%\n  mutate(\n    Pop = as.numeric(Pop),\n    Age = ifelse(Age == \"90_and_Over\", 90, as.numeric(Age)),\n    Age_Group = case_when(\n      Age &lt;= 19 ~ \"0–19\",\n      Age &lt;= 39 ~ \"20–39\",\n      Age &lt;= 59 ~ \"40–59\",\n      Age &lt;= 79 ~ \"60–79\",\n      TRUE ~ \"80+\"\n    )\n  ) %&gt;%\n  filter(!is.na(Pop) & Pop &gt; 0) %&gt;%\n  group_by(PA, Age_Group) %&gt;%\n  summarise(\n    Pop = sum(Pop, na.rm = TRUE),\n    Num_Subzones = n_distinct(SZ)\n  ) %&gt;%\n  ungroup()\n\n# Calculate total population per PA for ordering and select top 10\npa_order &lt;- pop_by_pa_age %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop)) %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 5)\n\n# Filter data to top 10 PAs\npop_by_pa_age &lt;- pop_by_pa_age %&gt;%\n  filter(PA %in% pa_order$PA)\n\n# Add total population\npop_by_pa_age &lt;- pop_by_pa_age %&gt;%\n  left_join(pa_order, by = \"PA\")\n\n# Create stacked bar chart\np1 &lt;- ggplot(data = pop_by_pa_age, aes(x = reorder(PA, Total_Pop), y = Pop, fill = Age_Group)) +\n  geom_bar(\n    stat = \"identity\",\n    position = \"stack\"  # Stacked bars\n  ) +\n  theme_bw() +\n  ggtitle(\"Population by Top 5 Planning Areas and Age Group, Singapore 2024\") +\n  xlab(\"Planning Area\") +\n  ylab(\"Population\") +\n  theme(\n    axis.text.x = element_text(angle = 55, hjust = 1)\n  ) +\n  scale_y_continuous(\n    labels = comma,\n    breaks = seq(0, ceiling(max(pa_order$Total_Pop, na.rm = TRUE) / 100000) * 100000, by = 100000),\n    limits = c(0, ceiling(max(pa_order$Total_Pop, na.rm = TRUE) / 100000) * 100000)\n  ) +\n  scale_fill_manual(values = c(\"0–19\" = \"grey95\", \"20–39\" = \"grey80\", \"40–59\" = \"grey65\", \"60–79\" = \"grey50\", \"80+\" = \"grey35\"))\n\n# Render plot\nprint(p1)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-2-2",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot-2-2",
    "title": "Take-home Exercise 1",
    "section": "Plot 2",
    "text": "Plot 2\n\n\nShow the code\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(ggridges)\n\n# Disable scientific notation\noptions(scipen = 999)\n\n# Load data\nrespopagesex2024 &lt;- read_csv(\"TakeHome_01/respopagesex2024.csv\")\n\n# Prepare data: Convert Age to numeric\npop_data &lt;- respopagesex2024 %&gt;%\n  mutate(\n    Pop = as.numeric(Pop),\n    Age_Num = case_when(\n      Age == \"90_and_Over\" ~ 90,\n      TRUE ~ as.numeric(gsub(\"–.*\", \"\", Age)) + 2.5  # Midpoint of 5-year age groups\n    )\n  ) %&gt;%\n  filter(!is.na(Pop) & Pop &gt; 0 & !is.na(Age_Num))\n\n# Order PAs by total population and select top 10\npa_order &lt;- pop_data %&gt;%\n  group_by(PA) %&gt;%\n  summarise(Total_Pop = sum(Pop, na.rm = TRUE)) %&gt;%\n  arrange(desc(Total_Pop)) %&gt;%\n  slice_head(n = 5) %&gt;%\n  pull(PA)\n\n# Filter data to top 10 PAs\nage_data &lt;- pop_data %&gt;%\n  filter(PA %in% pa_order) %&gt;%\n  uncount(Pop)  # Expand data to represent each individual (weighted by Pop)\n\n# Create ridgeline plot\np2 &lt;- ggplot(data = age_data, aes(x = Age_Num, y = factor(PA, levels = rev(pa_order)), height = ..density..)) +\n  geom_density_ridges(\n    stat = \"density\",\n    fill = \"grey20\",\n    color = \"grey90\",\n    scale = 1.5,  # Controls ridge overlap\n    alpha = 1.5\n  ) +\n  facet_wrap(~ Sex, ncol = 2) +\n  theme_bw() +\n  ggtitle(\"Age Distribution in Top 5 Populated Planning Areas by Gender, Singapore 2024\") +\n  xlab(\"Age (Years)\") +\n  ylab(\"Planning Area\") +\n  scale_x_continuous(\n    breaks = seq(0, 100, by = 20),\n    limits = c(0, 100)\n  ) +\n  theme(\n    axis.text.y = element_text(size = 12),  # Larger text for fewer PAs\n    axis.text.x = element_text(size = 12),\n    axis.title = element_text(size = 12),\n    plot.title = element_text(size = 15),\n    strip.text = element_text(size = 12),\n    strip.background = element_rect(fill = \"grey90\")\n  )\n\n# Render plot\nprint(p2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#insight-2",
    "title": "Take-home Exercise 1",
    "section": "Insight",
    "text": "Insight\n\nBoth plots provide insights into Singapore’s 2024 population across the top 5 planning areas (PAs): Tampines, Bedok, Sengkang, Jurong West, and Woodlands.\nThe stacked bar chart (Plot 1) shows Tampines as the most populous (300,000), with a dominant working-age group (20–59) across all PAs, a small youth group (0–19), and notable elderly groups (60–80+) in Bedok and Woodlands.\nThe ridgeline plot (Plot 2) confirms these trends, highlighting working-age peaks at 30–50, a young peak in Sengkang (0–20), and broader elderly curves in Bedok and Woodlands.\nGender-wise, females show higher elderly presence (60–80+), while males peak at 30–50. Sengkang is likely family-oriented, while Bedok and Woodlands are aging, and Tampines and Jurong West are balanced."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#view-column-names-and-adjust-data",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#view-column-names-and-adjust-data",
    "title": "Take-home Exercise 1",
    "section": "View Column Names and Adjust Data",
    "text": "View Column Names and Adjust Data\n\ncolnames(respopagesex2024)\n\n[1] \"PA\"   \"SZ\"   \"Age\"  \"Sex\"  \"Pop\"  \"Time\"\n\n\n\n\nShow the code\ndf &lt;- tibble(\n  PA = c(\"Planning Area\"),\n  SZ = c(\"Subzone\"),\n  Age = c(\"Age\"),\n  Sex = c(\"Sex\"),\n  Pop = c(\"Population\"),\n  Time = c(\"Time\")\n)\n\ndf %&gt;%\n  knitr::kable(caption = \"Column Information\")\n\n\n\nColumn Information\n\n\nPA\nSZ\nAge\nSex\nPop\nTime\n\n\n\n\nPlanning Area\nSubzone\nAge\nSex\nPopulation\nTime\n\n\n\n\n\n\nlibrary(dplyr)\n\ndf_percent &lt;- respopagesex2024 %&gt;%\n  mutate(\n    Age = as.numeric(Age),\n    AgeGroup = case_when(\n      Age &lt;= 14 ~ \"Children\",\n      Age &gt;= 15 & Age &lt;= 64 ~ \"Adults\",\n      Age &gt;= 65 ~ \"Seniors\",\n      TRUE ~ NA_character_\n    )\n  ) %&gt;%\n  group_by(PA, AgeGroup) %&gt;%\n  summarise(Population = sum(Pop), .groups = \"drop\") %&gt;%\n  group_by(PA) %&gt;%\n  mutate(\n    Total_Pop = sum(Population),\n    Percent = Population / Total_Pop * 100\n  )\n\n\ndf_summary &lt;- df_clean %&gt;%\n  group_by(PA) %&gt;%\n  summarise(\n    Total_Pop = sum(Pop, na.rm = TRUE),\n    .groups = \"drop\"\n  ) %&gt;%\n  arrange(desc(Total_Pop))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#plot",
    "title": "Take-home Exercise 1",
    "section": "Plot",
    "text": "Plot\n\n\nShow the code\nbottom10_pa &lt;- df_summary %&gt;%\n  slice_min(Total_Pop, n = 10) %&gt;%\n  pull(PA)\n\ndf_summary_filtered &lt;- df_summary %&gt;%\n  filter(!PA %in% bottom10_pa)\n\nggplot(df_summary_filtered, aes(x = reorder(PA, -Total_Pop), y = Total_Pop)) +\n  geom_bar(stat = \"identity\", color = \"black\", fill = \"lightblue\", width = 0.75) +\n  scale_y_continuous(labels = scales::comma, expand = c(0, 0)) +  \n  labs(\n    x = \"Planning Area\",\n    y = \"Total Population\",\n    title = \"Total Population by Planning Area (2024)\"\n  ) +\n  theme_classic(base_size = 12) +\n  theme(axis.text.x = element_text(angle = 55, hjust = 1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-1-data-import-1",
    "title": "Hands-on Exercise 06",
    "section": "17.4.1 Step 1: Data Import",
    "text": "17.4.1 Step 1: Data Import\n\nrice &lt;- read_csv(\"Data_06/rice.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#step-2-plotting-the-slopegraph",
    "title": "Hands-on Exercise 06",
    "section": "17.4.2 Step 2: Plotting the slopegraph",
    "text": "17.4.2 Step 2: Plotting the slopegraph\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFor effective data visualisation design, factor() is used convert the value type of Year field from numeric to factor."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#compare-3-singers-careers-sailor-kimberly-and-ping-timeline.",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#compare-3-singers-careers-sailor-kimberly-and-ping-timeline.",
    "title": "Take-Home Exercise 2",
    "section": "Compare 3 singers careers: Sailor, Kimberly and Ping Timeline.",
    "text": "Compare 3 singers careers: Sailor, Kimberly and Ping Timeline."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#complete-timeline-of-when-they-started-their-influence-through-out-their-careers.",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#complete-timeline-of-when-they-started-their-influence-through-out-their-careers.",
    "title": "Take-Home Exercise 2",
    "section": "Complete timeline of when they started their influence through out their careers.",
    "text": "Complete timeline of when they started their influence through out their careers.\n\n# Helper function to get songs performed by an artist\nget_songs_by_artist &lt;- function(artist_name) {\n  artist_id &lt;- nodes_tbl %&gt;% filter(name == artist_name) %&gt;% pull(id)\n  \n  edges_tbl %&gt;%\n    filter(`Edge Type` == \"PerformerOf\", source == artist_id) %&gt;%\n    pull(target)\n}\n\n# Influence types\ninfluence_types &lt;- c(\"InStyleOf\", \"CoverOf\", \"DirectlySamples\", \"InterpolatesFrom\", \"LyricalReferenceTo\")\n\n# Function to compute influence count per year\nget_influence_scores &lt;- function(artist_name) {\n  song_ids &lt;- get_songs_by_artist(artist_name)\n  \n  nodes_tbl %&gt;%\n    filter(id %in% song_ids, !is.na(release_date)) %&gt;%\n    mutate(release_year = as.numeric(release_date)) %&gt;%\n    inner_join(edges_tbl %&gt;% \n                 filter(`Edge Type` %in% influence_types, source %in% song_ids),\n               by = c(\"id\" = \"source\")) %&gt;%\n    count(release_year, name = \"influence_score\") %&gt;%\n    mutate(artist = artist_name)\n}\n\n\n\n# Get all three artists\nsailor_scores &lt;- get_influence_scores(\"Sailor Shift\")\nkimberly_scores &lt;- get_influence_scores(\"Kimberly Snyder\")\nping_scores &lt;- get_influence_scores(\"Ping Tian\")\n\n# Combine into one data frame\ninfluence_trends &lt;- bind_rows(sailor_scores, kimberly_scores, ping_scores)\n\ninfluence_trends &lt;- influence_trends %&gt;%\n  filter(release_year &gt;= 2000)  # filter invalid or early dates\n\nggplot(influence_trends, aes(x = release_year, y = influence_score, color = artist)) +\n  geom_line(size = 1.2) +\n  geom_point(size = 3) +\n  scale_x_continuous(breaks = 2000:2040) +\n  labs(\n    title = \"Influence Score Over Time by Artist\",\n    x = \"Release Year\",\n    y = \"Number of Songs Influencing Others\",\n    color = \"Artist\"\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(angle = 75, hjust = 1)\n  )"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#popularity-trends-over-time",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#popularity-trends-over-time",
    "title": "Take-Home Exercise 2",
    "section": "Popularity trends over time",
    "text": "Popularity trends over time\nFor Sailor Shift, Kimberly Snyder, and Ping Tian using the metrics:\n\nSongs performed per year\n\n\nShow the code\nsongs_performed_yearly &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` == \"PerformerOf\") %&gt;%\n  inner_join(nodes_tbl %&gt;% select(id, release_year = release_date), \n             by = c(\"target\" = \"id\")) %&gt;%\n  inner_join(nodes_tbl %&gt;% select(id, artist = name), \n             by = c(\"source\" = \"id\")) %&gt;%\n  filter(artist %in% c(\"Sailor Shift\", \"Kimberly Snyder\", \"Ping Tian\")) %&gt;%\n  group_by(artist, release_year) %&gt;%\n  summarise(songs_performed = n(), .groups = \"drop\")\n\n\n\n\nNumber of collaborations per year\n\n\nShow the code\n# Step 1: Get all PerformerOf edges and join release year\nperformer_songs &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` == \"PerformerOf\") %&gt;%\n  inner_join(nodes_tbl %&gt;% select(id, release_year = release_date), \n             by = c(\"target\" = \"id\")) %&gt;%\n  rename(song_id = target, artist_id = source)\n\n# Step 2: Count artists per song\ncollab_counts &lt;- performer_songs %&gt;%\n  group_by(song_id, release_year) %&gt;%\n  filter(n() &gt; 1) %&gt;%  # keep only collaborative songs\n  ungroup()\n\n# Step 3: Count how many times each artist appeared on collaborative songs per year\ncollaborations_yearly &lt;- collab_counts %&gt;%\n  inner_join(nodes_tbl %&gt;% select(id, artist = name), \n             by = c(\"artist_id\" = \"id\")) %&gt;%\n  filter(artist %in% c(\"Sailor Shift\", \"Kimberly Snyder\", \"Ping Tian\")) %&gt;%\n  group_by(artist, release_year) %&gt;%\n  summarise(collabs = n(), .groups = \"drop\")\n\n\n\n\nNotable Mentions (in songs or albums) Per Year\n\n\nShow the code\nnotables_yearly &lt;- edges_tbl %&gt;%\n  filter(`Edge Type` == \"PerformerOf\") %&gt;%\n  inner_join(nodes_tbl %&gt;% select(id, release_year = release_date, notable), \n             by = c(\"target\" = \"id\")) %&gt;%\n  filter(notable == TRUE) %&gt;%\n  inner_join(nodes_tbl %&gt;% select(id, artist = name), \n             by = c(\"source\" = \"id\")) %&gt;%\n  filter(artist %in% c(\"Sailor Shift\", \"Kimberly Snyder\", \"Ping Tian\")) %&gt;%\n  group_by(artist, release_year) %&gt;%\n  summarise(notable_mentions = n(), .groups = \"drop\")\n\n\n\n\nCombining them together\n\n\nShow the code\npopularity_df &lt;- songs_performed_yearly %&gt;%\n  full_join(collaborations_yearly, by = c(\"artist\", \"release_year\")) %&gt;%\n  full_join(notables_yearly, by = c(\"artist\", \"release_year\")) %&gt;%\n  replace_na(list(\n    songs_performed = 0,\n    collabs = 0,\n    notable_mentions = 0\n  ))\n\n\n\nInfluence Score (Line Graph)Popularity Metrics (Line Graph)Popularity Index (Slope Graph)"
  }
]